%!PS-Adobe-3.1
%ADO_DSC_Encoding: UTF8
%%Title: NMF2016_stage_schedule.pdf
%%Creator: (Adobe Acrobat 11.0.10)
%%For: rich.haynie
%%CreationDate: 6/17/16, 3:26 PM
%%BoundingBox: 0 0 792 1224
%%HiResBoundingBox: 0 0 792 1224
%%CropBox: 0 0 792 1224
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 49524 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:MetadataDate="2016-06-14T15:46:05-07:00"
   xmp:ModifyDate="2016-06-14T15:46:05-07:00"
   xmp:CreateDate="2016-06-14T15:46:05-07:00"
   xmp:CreatorTool="Adobe Illustrator CC 2015 (Macintosh)"
   xmpMM:InstanceID="uuid:16dac4ef-fe59-7748-b062-bb73ad430fa0"
   xmpMM:DocumentID="xmp.did:fb6de5d8-ede6-4c3b-8c9d-36969e273f76"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   xmpTPg:HasVisibleOverprint="False"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:NPages="1"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">NMF2016_stage_schedule_outline copy</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="168"
      xmpGImg:height="256"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAACoAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8Ai0Q0iGwjnvUuHkllkjUQ&#xA;siqFjWM78lbc+pnPAPsWfNkE+GNVQO9+f6kxvtL0yynaCe0vRKsccnESxVIkFaD931HQ/LJ6bFLN&#xA;jnkh9MOfzr9vudNn7fGLLixSMeLMZCPP+EX3+4D3rrzSNNtb2SzktL03EbIgVZYjyMlCvH93/lYc&#xA;GGWXTyzx+iHP8eX6WvL7Rxx6nHpyY8eWMiOe3D379fVX9V0ukaZHqLaebW8Nws4t6CWOhLUo3939&#xA;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"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:432da6c2-616d-4401-8781-888509b37039"
    stRef:documentID="xmp.did:432da6c2-616d-4401-8781-888509b37039"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:432da6c2-616d-4401-8781-888509b37039"
      stEvt:when="2016-06-14T15:45:41-07:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2015 (Macintosh)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:fb6de5d8-ede6-4c3b-8c9d-36969e273f76"
      stEvt:when="2016-06-14T15:46:03-07:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2015 (Macintosh)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="11.000000"
    stDim:h="17.000000"
    stDim:unit="Inches"/>
   <xmpTPg:Fonts>
    <rdf:Bag>
     <rdf:li
      stFnt:fontName="BentonSans-Bold"
      stFnt:fontFamily="BentonSans"
      stFnt:fontFace="Bold"
      stFnt:fontType="Type 1"
      stFnt:versionString="001.000"
      stFnt:composite="False"
      stFnt:fontFileName="BentoSanBol; BentonSans-Bold.bmap"/>
    </rdf:Bag>
   </xmpTPg:Fonts>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Default Swatch Group"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="White"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="Black"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="100.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Red"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Yellow"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Green"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Cyan"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Blue"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Magenta"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=15 M=100 Y=90 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="15.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="90.000000"
         xmpG:black="10.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=90 Y=85 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="90.000000"
         xmpG:yellow="85.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=80 Y=95 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="80.000000"
         xmpG:yellow="95.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=50 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=35 Y=85 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="35.000000"
         xmpG:yellow="85.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=5 M=0 Y=90 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="5.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="90.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=20 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="20.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=75 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=85 M=10 Y=100 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="85.000000"
         xmpG:magenta="10.000000"
         xmpG:yellow="100.000000"
         xmpG:black="10.000000"/>
        <rdf:li
         xmpG:swatchName="C=90 M=30 Y=95 K=30"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="90.000000"
         xmpG:magenta="30.000000"
         xmpG:yellow="95.000000"
         xmpG:black="30.000000"/>
        <rdf:li
         xmpG:swatchName="C=75 M=0 Y=75 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="75.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=80 M=10 Y=45 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="80.000000"
         xmpG:magenta="10.000000"
         xmpG:yellow="45.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=70 M=15 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="70.000000"
         xmpG:magenta="15.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=85 M=50 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="85.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=100 M=95 Y=5 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="95.000000"
         xmpG:yellow="5.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=100 M=100 Y=25 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="25.000000"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=75 M=100 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=100 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=35 M=100 Y=35 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="35.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="35.000000"
         xmpG:black="10.000000"/>
        <rdf:li
         xmpG:swatchName="C=10 M=100 Y=50 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="10.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="50.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=95 Y=20 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="95.000000"
         xmpG:yellow="20.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=25 M=25 Y=40 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="25.000000"
         xmpG:magenta="25.000000"
         xmpG:yellow="40.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=40 M=45 Y=50 K=5"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="40.000000"
         xmpG:magenta="45.000000"
         xmpG:yellow="50.000000"
         xmpG:black="5.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=50 Y=60 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="60.000000"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=55 M=60 Y=65 K=40"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="55.000000"
         xmpG:magenta="60.000000"
         xmpG:yellow="65.000000"
         xmpG:black="40.000000"/>
        <rdf:li
         xmpG:swatchName="C=25 M=40 Y=65 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="25.000000"
         xmpG:magenta="40.000000"
         xmpG:yellow="65.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=30 M=50 Y=75 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="30.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="75.000000"
         xmpG:black="10.000000"/>
        <rdf:li
         xmpG:swatchName="C=35 M=60 Y=80 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="35.000000"
         xmpG:magenta="60.000000"
         xmpG:yellow="80.000000"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=40 M=65 Y=90 K=35"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="40.000000"
         xmpG:magenta="65.000000"
         xmpG:yellow="90.000000"
         xmpG:black="35.000000"/>
        <rdf:li
         xmpG:swatchName="C=40 M=70 Y=100 K=50"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="40.000000"
         xmpG:magenta="70.000000"
         xmpG:yellow="100.000000"
         xmpG:black="50.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=70 Y=80 K=70"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="70.000000"
         xmpG:yellow="80.000000"
         xmpG:black="70.000000"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Grays"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=100"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="100.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=90"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="89.999400"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=80"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="79.998800"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=70"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="69.999700"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=60"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="59.999100"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=50"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="50.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=40"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="39.999400"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=30"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="29.998800"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=20"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="19.999700"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="9.999100"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=5"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="4.998800"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Brights"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="C=0 M=100 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=75 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="75.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=10 Y=95 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="10.000000"
         xmpG:yellow="95.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=85 M=10 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="85.000000"
         xmpG:magenta="10.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=100 M=90 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="90.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=60 M=90 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="60.000000"
         xmpG:magenta="90.000000"
         xmpG:yellow="0.003100"
         xmpG:black="0.003100"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [792 1224 ] >> setpagedevice
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -1224 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1224 li
792 1224 li
792 0 li
cp
clp
757.5 1119.75 mo
22.5 1119.75 li
22.5 176.059 li
757.5 176.059 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.5 0 0 .1 cmyk
f
774.529 21.238 mo
17.47 21.238 li
17.47 1202.76 li
774.529 1202.76 li
cp
756.06 1180.71 mo
35.939 1180.71 li
35.939 43.2931 li
756.06 43.2931 li
cp
.1 1 1 .1 cmyk
f
36 1179 mo
756 1179 li
756 45 li
36 45 li
cp
47.989 59.592 mo
744.011 59.592 li
744.011 1164.41 li
47.989 1164.41 li
cp
0 0 0 0 cmyk
f
18.4537 1109.48 mo
36.0747 1099.33 li
36.0747 1119.64 li
cp
1 0 0 .1 cmyk
f
18.4545 1109.48 mo
18.4535 1109.48 li
18.4545 1109.48 li
18.4535 1109.48 li
18.4535 1109.48 li
18.4545 1109.48 li
18.4565 1109.48 li
18.4565 1109.48 li
cp
f
36.075 1119.63 mo
36.075 1139.93 li
18.454 1129.79 li
cp
0 .35 .85 0 cmyk
f
36.075 1099.33 mo
36.075 1119.63 li
18.454 1109.49 li
cp
1 0 0 .1 cmyk
f
18.4537 1170.38 mo
36.0747 1160.23 li
36.0747 1180.54 li
cp
0 .35 .85 0 cmyk
f
18.4537 1150.08 mo
36.0747 1139.93 li
36.0747 1160.24 li
cp
1 0 0 .1 cmyk
f
18.4537 1028.28 mo
36.0747 1018.13 li
36.0747 1038.44 li
cp
f
18.4545 1028.28 mo
18.4535 1028.28 li
18.4545 1028.28 li
18.4535 1028.28 li
18.4535 1028.29 li
18.4545 1028.29 li
18.4565 1028.29 li
18.4565 1028.28 li
cp
f
36.075 1038.43 mo
36.075 1058.73 li
18.454 1048.58 li
cp
0 .35 .85 0 cmyk
f
36.075 1018.13 mo
36.075 1038.43 li
18.454 1028.29 li
cp
1 0 0 .1 cmyk
f
18.4537 1089.18 mo
36.0747 1079.03 li
36.0747 1099.34 li
cp
0 .35 .85 0 cmyk
f
18.4537 1068.88 mo
36.0747 1058.73 li
36.0747 1079.04 li
cp
1 0 0 .1 cmyk
f
18.4537 947.084 mo
36.0747 936.933 li
36.0747 957.235 li
cp
f
18.4545 947.083 mo
18.4535 947.083 li
18.4535 947.085 li
18.4535 947.086 li
18.4545 947.086 li
18.4565 947.086 li
18.4565 947.083 li
18.4565 947.085 li
18.4565 947.083 li
cp
f
36.075 957.234 mo
36.075 977.534 li
18.454 967.385 li
cp
0 .35 .85 0 cmyk
f
36.075 936.934 mo
36.075 957.234 li
18.454 947.085 li
cp
1 0 0 .1 cmyk
f
18.4537 1007.98 mo
36.0747 997.833 li
36.0747 1018.14 li
cp
0 .35 .85 0 cmyk
f
18.4537 987.684 mo
36.0747 977.533 li
36.0747 997.835 li
cp
1 0 0 .1 cmyk
f
18.4537 865.884 mo
36.0747 855.733 li
36.0747 876.035 li
cp
f
18.4545 865.883 mo
18.4535 865.883 li
18.4535 865.885 li
18.4535 865.886 li
18.4545 865.886 li
18.4565 865.886 li
18.4565 865.883 li
18.4565 865.885 li
18.4565 865.883 li
cp
f
36.075 876.034 mo
36.075 896.334 li
18.454 886.185 li
cp
0 .35 .85 0 cmyk
f
36.075 855.734 mo
36.075 876.034 li
18.454 865.885 li
cp
1 0 0 .1 cmyk
f
18.4537 926.784 mo
36.0747 916.633 li
36.0747 936.935 li
cp
0 .35 .85 0 cmyk
f
18.4537 906.484 mo
36.0747 896.333 li
36.0747 916.635 li
cp
1 0 0 .1 cmyk
f
18.4537 784.684 mo
36.0747 774.533 li
36.0747 794.835 li
cp
f
18.4545 784.683 mo
18.4535 784.683 li
18.4535 784.684 li
18.4535 784.686 li
18.4545 784.684 li
18.4545 784.686 li
18.4545 784.684 li
18.4545 784.686 li
18.4565 784.686 li
18.4565 784.683 li
cp
f
36.075 794.834 mo
36.075 815.134 li
18.454 804.985 li
cp
0 .35 .85 0 cmyk
f
36.075 774.534 mo
36.075 794.834 li
18.454 784.685 li
cp
1 0 0 .1 cmyk
f
18.4537 845.584 mo
36.0747 835.433 li
36.0747 855.735 li
cp
0 .35 .85 0 cmyk
f
18.4537 825.284 mo
36.0747 815.133 li
36.0747 835.435 li
cp
1 0 0 .1 cmyk
f
18.4537 703.484 mo
36.0747 693.333 li
36.0747 713.635 li
cp
f
18.4545 703.483 mo
18.4535 703.483 li
18.4535 703.484 li
18.4535 703.486 li
18.4545 703.484 li
18.4545 703.486 li
18.4545 703.484 li
18.4545 703.486 li
18.4565 703.486 li
18.4565 703.483 li
cp
f
36.075 713.634 mo
36.075 733.934 li
18.454 723.785 li
cp
0 .35 .85 0 cmyk
f
36.075 693.334 mo
36.075 713.634 li
18.454 703.485 li
cp
1 0 0 .1 cmyk
f
18.4537 764.384 mo
36.0747 754.233 li
36.0747 774.535 li
cp
0 .35 .85 0 cmyk
f
18.4537 744.084 mo
36.0747 733.933 li
36.0747 754.235 li
cp
1 0 0 .1 cmyk
f
18.4537 622.284 mo
36.0747 612.133 li
36.0747 632.435 li
cp
f
18.4545 622.283 mo
18.4535 622.283 li
18.4545 622.283 li
18.4535 622.283 li
18.4535 622.284 li
18.4545 622.284 li
18.4565 622.284 li
18.4565 622.283 li
cp
f
36.075 632.433 mo
36.075 652.734 li
18.454 642.584 li
cp
0 .35 .85 0 cmyk
f
36.075 612.134 mo
36.075 632.434 li
18.454 622.285 li
cp
1 0 0 .1 cmyk
f
18.4537 683.184 mo
36.0747 673.033 li
36.0747 693.335 li
cp
0 .35 .85 0 cmyk
f
18.4537 662.884 mo
36.0747 652.733 li
36.0747 673.035 li
cp
1 0 0 .1 cmyk
f
18.4537 541.084 mo
36.0747 530.933 li
36.0747 551.235 li
cp
f
18.4545 541.083 mo
18.4535 541.083 li
18.4545 541.083 li
18.4535 541.083 li
18.4535 541.085 li
18.4545 541.085 li
18.4565 541.085 li
18.4565 541.083 li
cp
f
36.075 551.234 mo
36.075 571.534 li
18.454 561.385 li
cp
0 .35 .85 0 cmyk
f
36.075 530.933 mo
36.075 551.234 li
18.454 541.084 li
cp
1 0 0 .1 cmyk
f
18.4537 601.984 mo
36.0747 591.833 li
36.0747 612.135 li
cp
0 .35 .85 0 cmyk
f
18.4537 581.684 mo
36.0747 571.533 li
36.0747 591.835 li
cp
1 0 0 .1 cmyk
f
18.4537 459.883 mo
36.0747 449.732 li
36.0747 470.034 li
cp
f
18.4545 459.883 mo
18.4535 459.883 li
18.4545 459.883 li
18.4535 459.883 li
18.4535 459.885 li
18.4545 459.885 li
18.4565 459.885 li
18.4565 459.883 li
cp
f
36.075 470.034 mo
36.075 490.334 li
18.454 480.185 li
cp
0 .35 .85 0 cmyk
f
36.075 449.734 mo
36.075 470.034 li
18.454 459.885 li
cp
1 0 0 .1 cmyk
f
18.4537 520.783 mo
36.0747 510.632 li
36.0747 530.934 li
cp
0 .35 .85 0 cmyk
f
18.4537 500.484 mo
36.0747 490.333 li
36.0747 510.635 li
cp
1 0 0 .1 cmyk
f
18.4537 378.683 mo
36.0747 368.532 li
36.0747 388.834 li
cp
f
18.4545 378.682 mo
18.4535 378.682 li
18.4535 378.684 li
18.4535 378.685 li
18.4545 378.685 li
18.4565 378.685 li
18.4565 378.682 li
18.4565 378.684 li
18.4565 378.682 li
cp
f
36.075 388.833 mo
36.075 409.133 li
18.454 398.984 li
cp
0 .35 .85 0 cmyk
f
36.075 368.533 mo
36.075 388.833 li
18.454 378.684 li
cp
1 0 0 .1 cmyk
f
18.4537 439.583 mo
36.0747 429.433 li
36.0747 449.734 li
cp
0 .35 .85 0 cmyk
f
18.4537 419.283 mo
36.0747 409.132 li
36.0747 429.434 li
cp
1 0 0 .1 cmyk
f
18.4537 297.483 mo
36.0747 287.332 li
36.0747 307.634 li
cp
f
18.4545 297.482 mo
18.4535 297.482 li
18.4535 297.483 li
18.4535 297.485 li
18.4545 297.483 li
18.4545 297.485 li
18.4545 297.483 li
18.4545 297.485 li
18.4565 297.485 li
18.4565 297.482 li
18.4565 297.483 li
18.4565 297.482 li
cp
f
36.075 307.633 mo
36.075 327.933 li
18.454 317.784 li
cp
0 .35 .85 0 cmyk
f
36.075 287.333 mo
36.075 307.633 li
18.454 297.484 li
cp
1 0 0 .1 cmyk
f
18.4537 358.383 mo
36.0747 348.232 li
36.0747 368.534 li
cp
0 .35 .85 0 cmyk
f
18.4537 338.083 mo
36.0747 327.932 li
36.0747 348.234 li
cp
1 0 0 .1 cmyk
f
18.4537 216.283 mo
36.0747 206.132 li
36.0747 226.434 li
cp
f
18.4545 216.283 mo
18.4535 216.283 li
18.4535 216.284 li
18.4535 216.286 li
18.4545 216.284 li
18.4545 216.286 li
18.4545 216.284 li
18.4545 216.286 li
18.4565 216.286 li
18.4565 216.283 li
cp
f
36.075 226.433 mo
36.075 246.733 li
18.454 236.584 li
cp
0 .35 .85 0 cmyk
f
36.075 206.133 mo
36.075 226.433 li
18.454 216.284 li
cp
1 0 0 .1 cmyk
f
18.4537 277.183 mo
36.0747 267.032 li
36.0747 287.334 li
cp
0 .35 .85 0 cmyk
f
18.4537 256.883 mo
36.0747 246.732 li
36.0747 267.034 li
cp
1 0 0 .1 cmyk
f
18.4537 135.083 mo
36.0747 124.932 li
36.0747 145.234 li
cp
f
18.4545 135.082 mo
18.4535 135.082 li
18.4535 135.084 li
18.4545 135.084 li
18.4565 135.084 li
18.4565 135.082 li
cp
18.4545 135.084 mo
18.4535 135.084 li
cp
f
36.075 145.233 mo
36.075 165.533 li
18.454 155.384 li
cp
0 .35 .85 0 cmyk
f
36.075 124.933 mo
36.075 145.233 li
18.454 135.084 li
cp
1 0 0 .1 cmyk
f
18.4537 195.983 mo
36.0747 185.832 li
36.0747 206.134 li
cp
0 .35 .85 0 cmyk
f
18.4537 175.683 mo
36.0747 165.532 li
36.0747 185.834 li
cp
1 0 0 .1 cmyk
f
18.4537 53.8829 mo
36.0747 43.7321 li
36.0747 64.0339 li
cp
f
18.4545 53.8821 mo
18.4535 53.8821 li
18.4545 53.8821 li
18.4535 53.8821 li
18.4535 53.8842 li
18.4545 53.8842 li
18.4565 53.8842 li
18.4565 53.8821 li
cp
f
36.075 64.033 mo
36.075 84.333 li
18.454 74.184 li
cp
0 .35 .85 0 cmyk
f
36.075 43.7329 mo
36.075 64.033 li
18.454 53.8839 li
cp
1 0 0 .1 cmyk
f
18.4537 114.783 mo
36.0747 104.632 li
36.0747 124.934 li
cp
0 .35 .85 0 cmyk
f
18.4537 94.4829 mo
36.0747 84.332 li
36.0747 104.634 li
cp
1 0 0 .1 cmyk
f
99.0619 22.6895 mo
108.06 43.7325 li
90.0639 43.7325 li
cp
f
99.0621 22.6881 mo
99.0631 22.6902 li
99.0621 22.6902 li
99.0621 22.6881 li
99.0601 22.6881 li
99.0601 22.6902 li
99.0601 22.6921 li
99.0621 22.6921 li
99.0631 22.6921 li
99.0621 22.6921 li
99.0631 22.6921 li
99.0631 22.6902 li
99.0631 22.6881 li
cp
99.0601 22.6881 mo
99.0621 22.6902 li
99.0601 22.6902 li
cp
99.0621 22.6902 mo
99.0631 22.6902 li
99.0621 22.6902 li
99.0621 22.6921 li
99.0601 22.6921 li
99.0601 22.6902 li
cp
f
90.0637 43.7329 mo
72.0677 43.7329 li
81.0657 22.6899 li
cp
0 .35 .85 0 cmyk
f
108.06 43.7329 mo
90.064 43.7329 li
99.062 22.6899 li
cp
1 0 0 .1 cmyk
f
45.0731 22.6895 mo
54.0711 43.7325 li
36.0751 43.7325 li
cp
0 .35 .85 0 cmyk
f
63.0694 22.6895 mo
72.0674 43.7325 li
54.0714 43.7325 li
cp
1 0 0 .1 cmyk
f
171.047 22.6895 mo
180.045 43.7325 li
162.049 43.7325 li
cp
f
171.048 22.6881 mo
171.048 22.6902 li
cp
171.047 22.6881 mo
171.045 22.6902 li
171.047 22.6921 li
171.047 22.6902 li
171.048 22.6881 li
cp
171.047 22.6902 mo
171.048 22.6902 li
cp
171.048 22.6902 mo
171.048 22.6921 li
cp
171.047 22.6921 mo
171.048 22.6921 li
cp
171.045 22.6921 mo
171.047 22.6921 li
cp
f
162.049 43.7329 mo
144.053 43.7329 li
153.051 22.6899 li
cp
0 .35 .85 0 cmyk
f
180.045 43.7329 mo
162.049 43.7329 li
171.047 22.6899 li
cp
1 0 0 .1 cmyk
f
117.058 22.6895 mo
126.056 43.7325 li
108.06 43.7325 li
cp
0 .35 .85 0 cmyk
f
135.054 22.6895 mo
144.052 43.7325 li
126.056 43.7325 li
cp
1 0 0 .1 cmyk
f
243.032 22.6895 mo
252.03 43.7325 li
234.034 43.7325 li
cp
f
243.031 22.6881 mo
243.031 22.6902 li
243.031 22.6921 li
243.033 22.6921 li
243.033 22.6902 li
243.033 22.6881 li
cp
243.031 22.6881 mo
243.033 22.6902 li
243.031 22.6902 li
cp
243.031 22.6902 mo
243.033 22.6902 li
243.033 22.6921 li
243.031 22.6921 li
cp
f
234.034 43.7329 mo
216.038 43.7329 li
225.036 22.6899 li
cp
0 .35 .85 0 cmyk
f
252.03 43.7329 mo
234.034 43.7329 li
243.032 22.6899 li
cp
1 0 0 .1 cmyk
f
189.043 22.6895 mo
198.041 43.7325 li
180.045 43.7325 li
cp
0 .35 .85 0 cmyk
f
207.039 22.6895 mo
216.037 43.7325 li
198.041 43.7325 li
cp
1 0 0 .1 cmyk
f
315.017 22.6895 mo
324.015 43.7325 li
306.019 43.7325 li
cp
f
315.017 22.6881 mo
315.018 22.6902 li
315.017 22.6902 li
315.017 22.6881 li
315.015 22.6881 li
315.015 22.6902 li
315.015 22.6921 li
315.017 22.6921 li
315.018 22.6921 li
315.017 22.6921 li
315.018 22.6921 li
315.018 22.6902 li
315.018 22.6881 li
cp
315.015 22.6881 mo
315.017 22.6902 li
315.015 22.6902 li
cp
315.017 22.6902 mo
315.018 22.6902 li
315.017 22.6902 li
315.017 22.6921 li
315.015 22.6921 li
315.015 22.6902 li
cp
f
306.019 43.7329 mo
288.023 43.7329 li
297.021 22.6899 li
cp
0 .35 .85 0 cmyk
f
324.015 43.7329 mo
306.019 43.7329 li
315.017 22.6899 li
cp
1 0 0 .1 cmyk
f
261.028 22.6895 mo
270.026 43.7325 li
252.03 43.7325 li
cp
0 .35 .85 0 cmyk
f
279.024 22.6895 mo
288.022 43.7325 li
270.026 43.7325 li
cp
1 0 0 .1 cmyk
f
387.002 22.6895 mo
396 43.7325 li
378.004 43.7325 li
cp
f
387.003 22.6881 mo
387.003 22.6902 li
cp
387.002 22.6881 mo
387 22.6902 li
387.002 22.6921 li
387.002 22.6902 li
387.003 22.6881 li
cp
387.002 22.6902 mo
387.003 22.6902 li
cp
387.003 22.6902 mo
387.003 22.6921 li
cp
387.002 22.6921 mo
387.003 22.6921 li
cp
387 22.6921 mo
387.002 22.6921 li
cp
f
378.004 43.7329 mo
360.008 43.7329 li
369.006 22.6899 li
cp
0 .35 .85 0 cmyk
f
396 43.7329 mo
378.004 43.7329 li
387.002 22.6899 li
cp
1 0 0 .1 cmyk
f
333.013 22.6895 mo
342.011 43.7325 li
324.015 43.7325 li
cp
0 .35 .85 0 cmyk
f
351.009 22.6895 mo
360.007 43.7325 li
342.011 43.7325 li
cp
1 0 0 .1 cmyk
f
458.987 22.6895 mo
467.985 43.7325 li
449.989 43.7325 li
cp
f
458.987 22.6881 mo
458.987 22.6902 li
458.987 22.6921 li
458.987 22.6921 li
458.987 22.6902 li
458.987 22.6881 li
cp
458.987 22.6881 mo
458.987 22.6902 li
458.987 22.6902 li
cp
458.987 22.6902 mo
458.987 22.6902 li
458.987 22.6921 li
458.987 22.6921 li
cp
f
449.989 43.7329 mo
431.993 43.7329 li
440.991 22.6899 li
cp
0 .35 .85 0 cmyk
f
467.985 43.7329 mo
449.989 43.7329 li
458.987 22.6899 li
cp
1 0 0 .1 cmyk
f
404.998 22.6895 mo
413.996 43.7325 li
396 43.7325 li
cp
0 .35 .85 0 cmyk
f
422.994 22.6895 mo
431.992 43.7325 li
413.996 43.7325 li
cp
1 0 0 .1 cmyk
f
530.972 22.6895 mo
539.97 43.7325 li
521.974 43.7325 li
cp
f
530.972 22.6881 mo
530.973 22.6902 li
530.972 22.6902 li
530.972 22.6881 li
530.97 22.6881 li
530.97 22.6902 li
530.97 22.6921 li
530.972 22.6921 li
530.973 22.6921 li
530.972 22.6921 li
530.973 22.6921 li
530.973 22.6902 li
530.973 22.6881 li
cp
530.97 22.6881 mo
530.972 22.6902 li
530.97 22.6902 li
cp
530.972 22.6902 mo
530.973 22.6902 li
530.972 22.6902 li
530.972 22.6921 li
530.97 22.6921 li
530.97 22.6902 li
cp
f
521.974 43.7329 mo
503.978 43.7329 li
512.976 22.6899 li
cp
0 .35 .85 0 cmyk
f
539.97 43.7329 mo
521.974 43.7329 li
530.972 22.6899 li
cp
1 0 0 .1 cmyk
f
476.983 22.6895 mo
485.981 43.7325 li
467.985 43.7325 li
cp
0 .35 .85 0 cmyk
f
494.979 22.6895 mo
503.977 43.7325 li
485.981 43.7325 li
cp
1 0 0 .1 cmyk
f
602.957 22.6895 mo
611.955 43.7325 li
593.959 43.7325 li
cp
f
602.958 22.6881 mo
602.958 22.6902 li
cp
602.957 22.6881 mo
602.955 22.6902 li
602.957 22.6921 li
602.957 22.6902 li
602.958 22.6881 li
cp
602.957 22.6902 mo
602.958 22.6902 li
cp
602.958 22.6902 mo
602.958 22.6921 li
cp
602.957 22.6921 mo
602.958 22.6921 li
cp
602.955 22.6921 mo
602.957 22.6921 li
cp
f
593.959 43.7329 mo
575.963 43.7329 li
584.961 22.6899 li
cp
0 .35 .85 0 cmyk
f
611.955 43.7329 mo
593.959 43.7329 li
602.957 22.6899 li
cp
1 0 0 .1 cmyk
f
548.968 22.6895 mo
557.966 43.7325 li
539.97 43.7325 li
cp
0 .35 .85 0 cmyk
f
566.964 22.6895 mo
575.962 43.7325 li
557.966 43.7325 li
cp
1 0 0 .1 cmyk
f
674.942 22.6895 mo
683.94 43.7325 li
665.944 43.7325 li
cp
f
674.942 22.6881 mo
674.942 22.6902 li
674.942 22.6921 li
674.943 22.6921 li
674.943 22.6902 li
674.943 22.6881 li
cp
674.942 22.6881 mo
674.943 22.6902 li
674.942 22.6902 li
cp
674.942 22.6902 mo
674.943 22.6902 li
674.943 22.6921 li
674.942 22.6921 li
cp
f
665.944 43.7329 mo
647.948 43.7329 li
656.946 22.6899 li
cp
0 .35 .85 0 cmyk
f
683.94 43.7329 mo
665.944 43.7329 li
674.942 22.6899 li
cp
1 0 0 .1 cmyk
f
620.953 22.6895 mo
629.951 43.7325 li
611.955 43.7325 li
cp
0 .35 .85 0 cmyk
f
638.949 22.6895 mo
647.947 43.7325 li
629.951 43.7325 li
cp
1 0 0 .1 cmyk
f
746.927 22.6895 mo
755.925 43.7325 li
737.929 43.7325 li
cp
f
746.926 22.6881 mo
746.926 22.6902 li
746.926 22.6921 li
746.927 22.6921 li
746.927 22.6902 li
746.927 22.6881 li
cp
746.926 22.6881 mo
746.927 22.6902 li
746.926 22.6902 li
cp
746.926 22.6902 mo
746.927 22.6902 li
746.927 22.6921 li
746.926 22.6921 li
cp
f
737.929 43.7329 mo
719.933 43.7329 li
728.931 22.6899 li
cp
0 .35 .85 0 cmyk
f
755.925 43.7329 mo
737.929 43.7329 li
746.927 22.6899 li
cp
1 0 0 .1 cmyk
f
692.938 22.6895 mo
701.936 43.7325 li
683.94 43.7325 li
cp
0 .35 .85 0 cmyk
f
710.934 22.6895 mo
719.932 43.7325 li
701.936 43.7325 li
cp
1 0 0 .1 cmyk
f
773.546 114.783 mo
755.925 124.934 li
755.925 104.632 li
cp
f
773.545 114.782 mo
773.543 114.782 li
773.543 114.784 li
773.545 114.784 li
773.546 114.784 li
773.545 114.784 li
773.546 114.784 li
773.546 114.782 li
cp
f
755.925 104.633 mo
755.925 84.334 li
773.546 94.4821 li
cp
0 .35 .85 0 cmyk
f
755.925 124.933 mo
755.925 104.634 li
773.546 114.782 li
cp
1 0 0 .1 cmyk
f
773.546 53.8829 mo
755.925 64.0339 li
755.925 43.7321 li
cp
0 .35 .85 0 cmyk
f
773.546 74.1829 mo
755.925 84.3339 li
755.925 64.032 li
cp
1 0 0 .1 cmyk
f
773.546 195.983 mo
755.925 206.134 li
755.925 185.832 li
cp
f
773.545 195.982 mo
773.543 195.982 li
773.543 195.983 li
773.545 195.983 li
773.546 195.983 li
773.545 195.983 li
773.546 195.983 li
773.546 195.982 li
cp
f
755.925 185.833 mo
755.925 165.534 li
773.546 175.682 li
cp
0 .35 .85 0 cmyk
f
755.925 206.133 mo
755.925 185.834 li
773.546 195.982 li
cp
1 0 0 .1 cmyk
f
773.546 135.083 mo
755.925 145.234 li
755.925 124.932 li
cp
0 .35 .85 0 cmyk
f
773.546 155.383 mo
755.925 165.534 li
755.925 145.232 li
cp
1 0 0 .1 cmyk
f
773.546 277.183 mo
755.925 287.334 li
755.925 267.032 li
cp
f
773.545 277.182 mo
773.543 277.182 li
773.543 277.185 li
773.543 277.184 li
773.543 277.185 li
773.545 277.185 li
773.546 277.185 li
773.546 277.184 li
773.545 277.184 li
773.546 277.184 li
773.546 277.182 li
cp
f
755.925 267.033 mo
755.925 246.734 li
773.546 256.882 li
cp
0 .35 .85 0 cmyk
f
755.925 287.333 mo
755.925 267.034 li
773.546 277.182 li
cp
1 0 0 .1 cmyk
f
773.546 216.283 mo
755.925 226.434 li
755.925 206.132 li
cp
0 .35 .85 0 cmyk
f
773.546 236.583 mo
755.925 246.734 li
755.925 226.432 li
cp
1 0 0 .1 cmyk
f
773.546 358.383 mo
755.925 368.534 li
755.925 348.232 li
cp
f
773.545 358.383 mo
773.546 358.383 li
773.546 358.382 li
cp
773.543 358.382 mo
773.543 358.385 li
773.543 358.383 li
773.543 358.385 li
773.545 358.385 li
773.546 358.385 li
773.546 358.383 li
773.545 358.383 li
773.545 358.382 li
773.545 358.383 li
773.545 358.382 li
cp
f
755.925 348.233 mo
755.925 327.934 li
773.546 338.082 li
cp
0 .35 .85 0 cmyk
f
755.925 368.533 mo
755.925 348.234 li
773.546 358.382 li
cp
1 0 0 .1 cmyk
f
773.546 297.483 mo
755.925 307.634 li
755.925 287.332 li
cp
0 .35 .85 0 cmyk
f
773.546 317.783 mo
755.925 327.934 li
755.925 307.632 li
cp
1 0 0 .1 cmyk
f
773.546 439.583 mo
755.925 449.734 li
755.925 429.433 li
cp
f
773.545 439.583 mo
773.546 439.583 li
773.546 439.582 li
cp
773.543 439.582 mo
773.543 439.585 li
773.545 439.585 li
773.546 439.585 li
773.546 439.583 li
773.545 439.583 li
773.545 439.582 li
773.545 439.583 li
773.545 439.582 li
cp
f
755.925 429.433 mo
755.925 409.135 li
773.546 419.283 li
cp
0 .35 .85 0 cmyk
f
755.925 449.734 mo
755.925 429.435 li
773.546 439.583 li
cp
1 0 0 .1 cmyk
f
773.546 378.683 mo
755.925 388.834 li
755.925 368.532 li
cp
0 .35 .85 0 cmyk
f
773.546 398.983 mo
755.925 409.134 li
755.925 388.832 li
cp
1 0 0 .1 cmyk
f
773.546 520.783 mo
755.925 530.934 li
755.925 510.632 li
cp
f
773.545 520.783 mo
773.543 520.783 li
773.543 520.784 li
773.545 520.784 li
773.546 520.784 li
773.545 520.784 li
773.546 520.784 li
773.546 520.783 li
cp
f
755.925 510.633 mo
755.925 490.335 li
773.546 500.483 li
cp
0 .35 .85 0 cmyk
f
755.925 530.933 mo
755.925 510.635 li
773.546 520.783 li
cp
1 0 0 .1 cmyk
f
773.546 459.883 mo
755.925 470.034 li
755.925 449.732 li
cp
0 .35 .85 0 cmyk
f
773.546 480.183 mo
755.925 490.334 li
755.925 470.032 li
cp
1 0 0 .1 cmyk
f
773.546 601.984 mo
755.925 612.135 li
755.925 591.833 li
cp
f
773.545 601.983 mo
773.543 601.983 li
773.543 601.984 li
773.545 601.984 li
773.546 601.984 li
773.545 601.984 li
773.546 601.984 li
773.546 601.983 li
cp
f
755.925 591.834 mo
755.925 571.534 li
773.546 581.683 li
cp
0 .35 .85 0 cmyk
f
755.925 612.134 mo
755.925 591.835 li
773.546 601.983 li
cp
1 0 0 .1 cmyk
f
773.546 541.084 mo
755.925 551.235 li
755.925 530.933 li
cp
0 .35 .85 0 cmyk
f
773.546 561.384 mo
755.925 571.535 li
755.925 551.233 li
cp
1 0 0 .1 cmyk
f
773.546 683.184 mo
755.925 693.335 li
755.925 673.033 li
cp
f
773.545 683.183 mo
773.543 683.183 li
773.543 683.184 li
773.545 683.184 li
773.546 683.184 li
773.545 683.184 li
773.546 683.184 li
773.546 683.183 li
cp
f
755.925 673.034 mo
755.925 652.735 li
773.546 662.883 li
cp
0 .35 .85 0 cmyk
f
755.925 693.334 mo
755.925 673.035 li
773.546 683.183 li
cp
1 0 0 .1 cmyk
f
773.546 622.284 mo
755.925 632.435 li
755.925 612.133 li
cp
0 .35 .85 0 cmyk
f
773.546 642.584 mo
755.925 652.735 li
755.925 632.433 li
cp
1 0 0 .1 cmyk
f
773.546 764.384 mo
755.925 774.535 li
755.925 754.233 li
cp
f
773.545 764.383 mo
773.543 764.383 li
773.543 764.386 li
773.543 764.385 li
773.543 764.386 li
773.545 764.386 li
773.546 764.386 li
773.546 764.385 li
773.545 764.385 li
773.546 764.385 li
773.546 764.383 li
cp
f
755.925 754.234 mo
755.925 733.935 li
773.546 744.083 li
cp
0 .35 .85 0 cmyk
f
755.925 774.534 mo
755.925 754.234 li
773.546 764.383 li
cp
1 0 0 .1 cmyk
f
773.546 703.484 mo
755.925 713.635 li
755.925 693.333 li
cp
0 .35 .85 0 cmyk
f
773.546 723.784 mo
755.925 733.935 li
755.925 713.633 li
cp
1 0 0 .1 cmyk
f
773.546 845.584 mo
755.925 855.735 li
755.925 835.433 li
cp
f
773.545 845.583 mo
773.546 845.583 li
773.546 845.582 li
cp
773.543 845.582 mo
773.543 845.585 li
773.543 845.583 li
773.543 845.585 li
773.545 845.585 li
773.546 845.585 li
773.546 845.583 li
773.545 845.583 li
773.545 845.582 li
773.545 845.583 li
773.545 845.582 li
cp
f
755.925 835.434 mo
755.925 815.135 li
773.546 825.283 li
cp
0 .35 .85 0 cmyk
f
755.925 855.734 mo
755.925 835.434 li
773.546 845.583 li
cp
1 0 0 .1 cmyk
f
773.546 784.684 mo
755.925 794.835 li
755.925 774.533 li
cp
0 .35 .85 0 cmyk
f
773.546 804.984 mo
755.925 815.135 li
755.925 794.833 li
cp
1 0 0 .1 cmyk
f
773.546 926.784 mo
755.925 936.935 li
755.925 916.633 li
cp
f
773.545 926.784 mo
773.546 926.784 li
773.546 926.782 li
cp
773.543 926.782 mo
773.543 926.785 li
773.545 926.785 li
773.546 926.785 li
773.546 926.784 li
773.545 926.784 li
773.545 926.782 li
773.545 926.784 li
773.545 926.782 li
cp
f
755.925 916.634 mo
755.925 896.334 li
773.546 906.483 li
cp
0 .35 .85 0 cmyk
f
755.925 936.934 mo
755.925 916.634 li
773.546 926.783 li
cp
1 0 0 .1 cmyk
f
773.546 865.884 mo
755.925 876.035 li
755.925 855.733 li
cp
0 .35 .85 0 cmyk
f
773.546 886.184 mo
755.925 896.335 li
755.925 876.033 li
cp
1 0 0 .1 cmyk
f
773.546 1007.98 mo
755.925 1018.14 li
755.925 997.833 li
cp
f
773.545 1007.98 mo
773.546 1007.98 li
cp
773.545 1007.98 mo
773.543 1007.98 li
773.543 1007.98 li
773.545 1007.98 li
773.546 1007.98 li
773.546 1007.98 li
cp
f
755.925 997.834 mo
755.925 977.534 li
773.546 987.683 li
cp
0 .35 .85 0 cmyk
f
755.925 1018.13 mo
755.925 997.834 li
773.546 1007.98 li
cp
1 0 0 .1 cmyk
f
773.546 947.084 mo
755.925 957.235 li
755.925 936.933 li
cp
0 .35 .85 0 cmyk
f
773.546 967.384 mo
755.925 977.535 li
755.925 957.233 li
cp
1 0 0 .1 cmyk
f
773.546 1089.18 mo
755.925 1099.34 li
755.925 1079.03 li
cp
f
773.545 1089.18 mo
773.543 1089.18 li
773.543 1089.18 li
773.545 1089.18 li
773.546 1089.18 li
773.545 1089.18 li
773.546 1089.18 li
773.546 1089.18 li
cp
f
755.925 1079.03 mo
755.925 1058.73 li
773.546 1068.88 li
cp
0 .35 .85 0 cmyk
f
755.925 1099.33 mo
755.925 1079.03 li
773.546 1089.18 li
cp
1 0 0 .1 cmyk
f
773.546 1028.28 mo
755.925 1038.44 li
755.925 1018.13 li
cp
0 .35 .85 0 cmyk
f
773.546 1048.58 mo
755.925 1058.74 li
755.925 1038.43 li
cp
1 0 0 .1 cmyk
f
773.546 1170.38 mo
755.925 1180.54 li
755.925 1160.23 li
cp
f
773.545 1170.38 mo
773.543 1170.38 li
773.543 1170.39 li
773.545 1170.39 li
773.546 1170.39 li
773.545 1170.39 li
773.546 1170.39 li
773.546 1170.38 li
cp
f
755.925 1160.23 mo
755.925 1139.93 li
773.546 1150.08 li
cp
0 .35 .85 0 cmyk
f
755.925 1180.53 mo
755.925 1160.23 li
773.546 1170.38 li
cp
1 0 0 .1 cmyk
f
773.546 1109.48 mo
755.925 1119.64 li
755.925 1099.33 li
cp
0 .35 .85 0 cmyk
f
773.546 1129.78 mo
755.925 1139.94 li
755.925 1119.63 li
cp
1 0 0 .1 cmyk
f
692.938 1201.58 mo
683.94 1180.53 li
701.936 1180.53 li
cp
f
692.939 1201.58 mo
692.94 1201.58 li
cp
692.937 1201.58 mo
692.939 1201.58 li
cp
692.937 1201.58 mo
692.937 1201.58 li
692.937 1201.58 li
692.939 1201.58 li
692.94 1201.58 li
692.939 1201.58 li
692.94 1201.58 li
692.939 1201.58 li
cp
692.939 1201.58 mo
692.939 1201.58 li
692.937 1201.58 li
692.939 1201.58 li
692.937 1201.58 li
cp
f
701.936 1180.53 mo
719.932 1180.53 li
710.934 1201.58 li
cp
0 .35 .85 0 cmyk
f
683.94 1180.53 mo
701.936 1180.53 li
692.938 1201.58 li
cp
1 0 0 .1 cmyk
f
746.927 1201.58 mo
737.929 1180.53 li
755.925 1180.53 li
cp
0 .35 .85 0 cmyk
f
728.931 1201.58 mo
719.933 1180.53 li
737.929 1180.53 li
cp
1 0 0 .1 cmyk
f
620.953 1201.58 mo
611.955 1180.53 li
629.951 1180.53 li
cp
f
620.954 1201.58 mo
620.955 1201.58 li
cp
620.952 1201.58 mo
620.954 1201.58 li
cp
620.954 1201.58 mo
620.954 1201.58 li
620.952 1201.58 li
620.954 1201.58 li
620.955 1201.58 li
620.954 1201.58 li
620.955 1201.58 li
cp
620.952 1201.58 mo
620.952 1201.58 li
cp
620.952 1201.58 mo
620.954 1201.58 li
cp
620.952 1201.58 mo
620.952 1201.58 li
cp
f
629.951 1180.53 mo
647.947 1180.53 li
638.949 1201.58 li
cp
0 .35 .85 0 cmyk
f
611.955 1180.53 mo
629.951 1180.53 li
620.953 1201.58 li
cp
1 0 0 .1 cmyk
f
674.942 1201.58 mo
665.944 1180.53 li
683.94 1180.53 li
cp
0 .35 .85 0 cmyk
f
656.946 1201.58 mo
647.948 1180.53 li
665.944 1180.53 li
cp
1 0 0 .1 cmyk
f
548.968 1201.58 mo
539.97 1180.53 li
557.966 1180.53 li
cp
f
548.969 1201.58 mo
548.969 1201.58 li
548.969 1201.58 li
548.967 1201.58 li
548.967 1201.58 li
548.969 1201.58 li
548.969 1201.58 li
cp
548.967 1201.58 mo
548.969 1201.58 li
cp
548.967 1201.58 mo
548.967 1201.58 li
cp
548.967 1201.58 mo
548.969 1201.58 li
cp
f
557.966 1180.53 mo
575.962 1180.53 li
566.964 1201.58 li
cp
0 .35 .85 0 cmyk
f
539.97 1180.53 mo
557.966 1180.53 li
548.968 1201.58 li
cp
1 0 0 .1 cmyk
f
602.957 1201.58 mo
593.959 1180.53 li
611.955 1180.53 li
cp
0 .35 .85 0 cmyk
f
584.961 1201.58 mo
575.963 1180.53 li
593.959 1180.53 li
cp
1 0 0 .1 cmyk
f
476.983 1201.58 mo
467.985 1180.53 li
485.981 1180.53 li
cp
f
476.985 1201.58 mo
476.985 1201.58 li
476.985 1201.58 li
476.985 1201.58 li
cp
476.983 1201.58 mo
476.985 1201.58 li
cp
476.982 1201.58 mo
476.983 1201.58 li
cp
476.982 1201.58 mo
476.982 1201.58 li
476.982 1201.58 li
476.983 1201.58 li
476.985 1201.58 li
476.983 1201.58 li
476.983 1201.58 li
476.982 1201.58 li
476.983 1201.58 li
476.982 1201.58 li
476.983 1201.58 li
476.983 1201.58 li
cp
476.983 1201.58 mo
476.985 1201.58 li
cp
f
485.981 1180.53 mo
503.977 1180.53 li
494.979 1201.58 li
cp
0 .35 .85 0 cmyk
f
467.985 1180.53 mo
485.981 1180.53 li
476.983 1201.58 li
cp
1 0 0 .1 cmyk
f
530.972 1201.58 mo
521.974 1180.53 li
539.97 1180.53 li
cp
0 .35 .85 0 cmyk
f
512.976 1201.58 mo
503.978 1180.53 li
521.974 1180.53 li
cp
1 0 0 .1 cmyk
f
404.998 1201.58 mo
396 1180.53 li
413.996 1180.53 li
cp
f
404.998 1201.58 mo
405 1201.58 li
cp
404.997 1201.58 mo
404.998 1201.58 li
cp
404.998 1201.58 mo
404.998 1201.58 li
404.997 1201.58 li
404.998 1201.58 li
405 1201.58 li
404.998 1201.58 li
405 1201.58 li
cp
404.997 1201.58 mo
404.997 1201.58 li
cp
404.997 1201.58 mo
404.998 1201.58 li
cp
404.997 1201.58 mo
404.997 1201.58 li
cp
f
413.996 1180.53 mo
431.992 1180.53 li
422.994 1201.58 li
cp
0 .35 .85 0 cmyk
f
396 1180.53 mo
413.996 1180.53 li
404.998 1201.58 li
cp
1 0 0 .1 cmyk
f
458.987 1201.58 mo
449.989 1180.53 li
467.985 1180.53 li
cp
0 .35 .85 0 cmyk
f
440.991 1201.58 mo
431.993 1180.53 li
449.989 1180.53 li
cp
1 0 0 .1 cmyk
f
333.013 1201.58 mo
324.015 1180.53 li
342.011 1180.53 li
cp
f
333.014 1201.58 mo
333.014 1201.58 li
333.014 1201.58 li
333.012 1201.58 li
333.012 1201.58 li
333.014 1201.58 li
333.014 1201.58 li
cp
333.012 1201.58 mo
333.014 1201.58 li
cp
333.012 1201.58 mo
333.012 1201.58 li
cp
333.012 1201.58 mo
333.014 1201.58 li
cp
f
342.011 1180.53 mo
360.007 1180.53 li
351.009 1201.58 li
cp
0 .35 .85 0 cmyk
f
324.015 1180.53 mo
342.011 1180.53 li
333.013 1201.58 li
cp
1 0 0 .1 cmyk
f
387.002 1201.58 mo
378.004 1180.53 li
396 1180.53 li
cp
0 .35 .85 0 cmyk
f
369.006 1201.58 mo
360.008 1180.53 li
378.004 1180.53 li
cp
1 0 0 .1 cmyk
f
261.028 1201.58 mo
252.03 1180.53 li
270.026 1180.53 li
cp
f
261.03 1201.58 mo
261.03 1201.58 li
261.03 1201.58 li
261.03 1201.58 li
cp
261.028 1201.58 mo
261.03 1201.58 li
cp
261.027 1201.58 mo
261.028 1201.58 li
cp
261.027 1201.58 mo
261.027 1201.58 li
261.027 1201.58 li
261.028 1201.58 li
261.03 1201.58 li
261.028 1201.58 li
261.028 1201.58 li
261.027 1201.58 li
261.028 1201.58 li
261.027 1201.58 li
261.028 1201.58 li
261.028 1201.58 li
cp
261.028 1201.58 mo
261.03 1201.58 li
cp
f
270.026 1180.53 mo
288.022 1180.53 li
279.024 1201.58 li
cp
0 .35 .85 0 cmyk
f
252.03 1180.53 mo
270.026 1180.53 li
261.028 1201.58 li
cp
1 0 0 .1 cmyk
f
315.017 1201.58 mo
306.019 1180.53 li
324.015 1180.53 li
cp
0 .35 .85 0 cmyk
f
297.021 1201.58 mo
288.023 1180.53 li
306.019 1180.53 li
cp
1 0 0 .1 cmyk
f
189.043 1201.58 mo
180.045 1180.53 li
198.041 1180.53 li
cp
f
189.043 1201.58 mo
189.045 1201.58 li
cp
189.042 1201.58 mo
189.043 1201.58 li
cp
189.043 1201.58 mo
189.043 1201.58 li
189.042 1201.58 li
189.043 1201.58 li
189.045 1201.58 li
189.043 1201.58 li
189.045 1201.58 li
cp
189.042 1201.58 mo
189.042 1201.58 li
cp
189.042 1201.58 mo
189.043 1201.58 li
cp
189.042 1201.58 mo
189.042 1201.58 li
cp
f
198.041 1180.53 mo
216.037 1180.53 li
207.039 1201.58 li
cp
0 .35 .85 0 cmyk
f
180.045 1180.53 mo
198.041 1180.53 li
189.043 1201.58 li
cp
1 0 0 .1 cmyk
f
243.032 1201.58 mo
234.034 1180.53 li
252.03 1180.53 li
cp
0 .35 .85 0 cmyk
f
225.036 1201.58 mo
216.038 1180.53 li
234.034 1180.53 li
cp
1 0 0 .1 cmyk
f
117.058 1201.58 mo
108.06 1180.53 li
126.056 1180.53 li
cp
f
117.059 1201.58 mo
117.059 1201.58 li
117.059 1201.58 li
117.057 1201.58 li
117.057 1201.58 li
117.059 1201.58 li
117.059 1201.58 li
cp
117.057 1201.58 mo
117.059 1201.58 li
cp
117.057 1201.58 mo
117.057 1201.58 li
cp
117.057 1201.58 mo
117.059 1201.58 li
cp
f
126.056 1180.53 mo
144.052 1180.53 li
135.054 1201.58 li
cp
0 .35 .85 0 cmyk
f
108.06 1180.53 mo
126.056 1180.53 li
117.058 1201.58 li
cp
1 0 0 .1 cmyk
f
171.047 1201.58 mo
162.049 1180.53 li
180.045 1180.53 li
cp
0 .35 .85 0 cmyk
f
153.051 1201.58 mo
144.053 1180.53 li
162.049 1180.53 li
cp
1 0 0 .1 cmyk
f
45.0731 1201.58 mo
36.0751 1180.53 li
54.0711 1180.53 li
cp
f
45.0747 1201.58 mo
45.0747 1201.58 li
45.0747 1201.58 li
45.0747 1201.58 li
cp
45.0727 1201.58 mo
45.0747 1201.58 li
cp
45.0717 1201.58 mo
45.0727 1201.58 li
cp
45.0717 1201.58 mo
45.0717 1201.58 li
45.0717 1201.58 li
45.0727 1201.58 li
45.0747 1201.58 li
45.0727 1201.58 li
45.0727 1201.58 li
45.0717 1201.58 li
45.0727 1201.58 li
45.0717 1201.58 li
45.0727 1201.58 li
45.0727 1201.58 li
cp
45.0727 1201.58 mo
45.0747 1201.58 li
cp
f
54.0712 1180.53 mo
72.0672 1180.53 li
63.0692 1201.58 li
cp
0 .35 .85 0 cmyk
f
36.075 1180.53 mo
54.071 1180.53 li
45.073 1201.58 li
cp
1 0 0 .1 cmyk
f
99.0619 1201.58 mo
90.0639 1180.53 li
108.06 1180.53 li
cp
0 .35 .85 0 cmyk
f
81.0656 1201.58 mo
72.0676 1180.53 li
90.0636 1180.53 li
cp
1 0 0 .1 cmyk
f
5.803 lw
1 lc
1 lj
4 ml
[] 0 dsh
true sadj
748.323 1170.24 mo
748.323 1170.24 li
0 .35 .85 0 cmyk
@
[0 11.493 ] 0 dsh
737.806 1170.24 mo
48.9344 1170.24 li
@
[] 0 dsh
43.6765 1170.24 mo
43.6765 1170.24 li
@
[0 11.479 ] 0 dsh
43.6765 1157.7 mo
43.6765 60.0321 li
@
[] 0 dsh
43.6765 53.7594 mo
43.6765 53.7594 li
@
[0 11.493 ] 0 dsh
54.1936 53.7594 mo
743.066 53.7594 li
@
[] 0 dsh
748.323 53.7594 mo
748.323 53.7594 li
@
[0 11.479 ] 0 dsh
748.323 66.304 mo
748.323 1163.97 li
@
0 1224 mo
792 1224 li
792 0 li
0 0 li
cp
1.885 2.25 mo
790.116 2.25 li
790.116 1221.75 li
1.885 1221.75 li
cp
.05 1 1 0 cmyk
f
0 1224 mo
792 1224 li
792 0 li
0 0 li
cp
13.189 15.75 mo
778.814 15.75 li
778.814 1208.25 li
13.189 1208.25 li
cp
f
725.676 1081.9 mo
427.067 1081.9 li
427.067 1150.58 li
728.712 1150.58 li
728.712 1081.9 li
cp
1 0 0 0 cmyk
f
722.64 1144.51 mo
433.14 1144.51 li
433.14 1087.97 li
722.64 1087.97 li
cp
0 0 0 0 cmyk
f
695.391 1118.56 mo
695.977 1114.75 698.077 1113.13 700.521 1113.13 cv
703.455 1113.13 705.116 1114.89 705.507 1118.56 cv
cp
712.546 1122.03 mo
712.546 1110.2 705.947 1107.51 700.571 1107.51 cv
695.194 1107.51 687.471 1110.98 687.471 1121.1 cv
687.471 1131.17 693.973 1134.64 700.766 1134.64 cv
705.312 1134.64 709.075 1133.32 712.106 1130.73 cv
709.075 1126.03 li
707.315 1127.65 704.431 1129.16 701.353 1129.16 cv
698.077 1129.16 695.683 1127.5 695.293 1123.2 cv
712.546 1123.2 li
cp
677.205 1112.4 mo
677.158 1112.4 li
677.158 1108.05 li
669.288 1108.05 li
669.288 1134.1 li
677.158 1134.1 li
677.158 1117.92 li
678.624 1116.02 680.97 1114.35 684.099 1114.35 cv
684.586 1114.35 685.857 1114.45 686.151 1114.5 cv
686.248 1107.51 li
686.003 1107.51 li
681.118 1107.51 678.624 1110.2 677.205 1112.4 cv
656.083 1134.1 mo
663.903 1134.1 li
663.903 1108.05 li
656.083 1108.05 li
cp
656.033 1104.48 mo
663.95 1104.48 li
663.95 1098.17 li
656.033 1098.17 li
cp
643.266 1126.33 mo
641.946 1127.65 640.04 1128.58 637.302 1128.58 cv
635.592 1128.58 634.418 1127.75 634.418 1126.08 cv
634.418 1123.69 637.059 1122.13 643.266 1121.49 cv
cp
650.938 1117.73 mo
650.938 1111.03 648.007 1107.51 640.87 1107.51 cv
634.37 1107.51 630.46 1109.81 627.869 1112.15 cv
631.192 1116.65 li
633.589 1114.79 636.423 1113.42 639.746 1113.42 cv
642.288 1113.42 643.266 1114.65 643.266 1116.55 cv
643.266 1117.19 li
631.829 1118.12 626.746 1121.44 626.746 1127.45 cv
626.746 1131.9 630.166 1134.49 634.175 1134.49 cv
638.036 1134.49 640.87 1132.98 643.266 1130.29 cv
643.266 1131.75 643.51 1133.02 643.853 1134.1 cv
651.672 1134.1 li
651.133 1132.78 650.938 1130.87 650.938 1127.75 cv
cp
612.035 1104.58 mo
627.969 1104.58 li
627.969 1097.93 li
604.068 1097.93 li
604.068 1134.1 li
612.035 1134.1 li
612.035 1119.68 li
623.373 1119.68 li
623.373 1113.38 li
612.035 1113.38 li
cp
577.431 1112.4 mo
577.383 1112.4 li
577.383 1108.05 li
569.513 1108.05 li
569.513 1134.1 li
577.383 1134.1 li
577.383 1117.92 li
578.848 1116.02 581.195 1114.35 584.324 1114.35 cv
584.811 1114.35 586.082 1114.45 586.377 1114.5 cv
586.474 1107.51 li
586.229 1107.51 li
581.343 1107.51 578.848 1110.2 577.431 1112.4 cv
547.815 1118.56 mo
548.401 1114.75 550.501 1113.13 552.945 1113.13 cv
555.879 1113.13 557.539 1114.89 557.931 1118.56 cv
cp
552.995 1107.51 mo
547.618 1107.51 539.895 1110.98 539.895 1121.1 cv
539.895 1131.17 546.396 1134.64 553.19 1134.64 cv
557.736 1134.64 561.499 1133.32 564.53 1130.73 cv
561.499 1126.03 li
559.739 1127.65 556.855 1129.16 553.777 1129.16 cv
550.501 1129.16 548.107 1127.5 547.717 1123.2 cv
564.969 1123.2 li
564.969 1122.03 li
564.969 1110.2 558.37 1107.51 552.995 1107.51 cv
539.399 1108.05 mo
530.945 1108.05 li
522.831 1117.78 li
522.831 1097.93 li
514.962 1097.93 li
514.962 1134.1 li
522.831 1134.1 li
522.831 1127.06 li
526.007 1123.49 li
531.774 1134.1 li
539.888 1134.1 li
530.896 1117.78 li
cp
501.571 1126.33 mo
500.251 1127.65 498.346 1128.58 495.607 1128.58 cv
493.897 1128.58 492.723 1127.75 492.723 1126.08 cv
492.723 1123.69 495.364 1122.13 501.571 1121.49 cv
cp
509.244 1117.73 mo
509.244 1111.03 506.312 1107.51 499.175 1107.51 cv
492.676 1107.51 488.766 1109.81 486.175 1112.15 cv
489.498 1116.65 li
491.894 1114.79 494.728 1113.42 498.051 1113.42 cv
500.593 1113.42 501.571 1114.65 501.571 1116.55 cv
501.571 1117.19 li
490.134 1118.12 485.051 1121.44 485.051 1127.45 cv
485.051 1131.9 488.471 1134.49 492.481 1134.49 cv
496.341 1134.49 499.175 1132.98 501.571 1130.29 cv
501.571 1131.75 501.816 1133.02 502.158 1134.1 cv
509.978 1134.1 li
509.439 1132.78 509.244 1130.87 509.244 1127.75 cv
cp
461.786 1124.52 mo
461.689 1124.52 li
453.625 1097.93 li
443.116 1097.93 li
443.116 1134.1 li
450.252 1134.1 li
450.252 1109.02 li
450.349 1109.02 li
451.131 1113.18 451.62 1114.75 452.451 1117.48 cv
457.827 1134.1 li
464.865 1134.1 li
470.29 1117.48 li
471.072 1114.84 471.756 1112.55 472.295 1109.42 cv
472.393 1109.42 li
472.393 1134.1 li
480.065 1134.1 li
480.065 1097.93 li
469.314 1097.93 li
cp
0 1 1 0 cmyk
f
716.176 1093.96 mo
716.52 1093.96 716.717 1093.85 716.717 1093.55 cv
716.717 1093.26 716.52 1093.15 716.168 1093.15 cv
715.702 1093.15 li
715.702 1093.96 li
cp
715.186 1092.69 mo
716.201 1092.69 li
716.847 1092.69 717.233 1092.97 717.233 1093.52 cv
717.233 1093.95 717.01 1094.18 716.676 1094.29 cv
717.271 1095.42 li
716.717 1095.42 li
716.159 1094.36 li
715.702 1094.36 li
715.702 1095.42 li
715.186 1095.42 li
cp
718.236 1094.11 mo
718.236 1092.92 717.331 1091.97 716.146 1091.97 cv
714.948 1091.97 714.063 1092.9 714.063 1094.1 cv
714.063 1095.29 714.968 1096.24 716.159 1096.24 cv
717.337 1096.24 718.236 1095.31 718.236 1094.11 cv
713.64 1094.11 mo
713.64 1092.71 714.748 1091.59 716.159 1091.59 cv
717.567 1091.59 718.646 1092.69 718.646 1094.1 cv
718.646 1095.5 717.549 1096.62 716.146 1096.62 cv
714.73 1096.62 713.64 1095.52 713.64 1094.11 cv
1 0 0 0 cmyk
f
123.059 169.143 mo
128.689 157.55 li
120.649 147.477 li
129.087 137.736 li
123.928 125.926 li
134.6 118.701 li
132.674 105.958 li
144.852 101.741 li
146.289 88.934 li
159.144 88.0131 li
163.847 76.014 li
176.503 78.451 li
184.151 68.078 li
195.744 73.708 li
205.817 65.668 li
215.558 74.106 li
227.368 68.947 li
234.593 79.619 li
247.336 77.693 li
251.553 89.871 li
264.36 91.309 li
265.281 104.163 li
277.28 108.867 li
274.843 121.522 li
285.216 129.17 li
.5 0 0 .1 cmyk
f
276.707 131.409 mo
266.786 91.4369 226.377 67.0178 186.362 76.8558 cv
146.346 86.6929 121.866 127.065 131.61 167.081 cv
cp
0 .55 1 0 cmyk
f
gsave
186.577 76.14 mo
146.561 85.978 122.08 126.348 131.824 166.365 cv
276.922 130.693 li
268.486 96.705 238.007 73.962 204.472 73.962 cv
198.567 73.962 192.568 74.667 186.577 76.14 cv
clp
238.044 163.198 mo
239.446 165.65 239.778 166.867 239.778 166.867 cv
243.076 165.656 310.405 136.719 310.405 136.719 cv
311.253 136.377 311.458 136.48 312.095 137.636 cv
313.411 140.023 315.679 147.339 316.807 151.925 cv
317.934 156.51 319.316 164.045 319.258 166.77 cv
319.229 168.088 319.095 168.275 318.185 168.365 cv
318.185 168.365 245.114 173.944 241.63 174.401 cv
241.63 174.401 241.9 175.634 241.795 178.456 cv
241.797 178.391 li
241.785 181.216 241.465 182.435 241.465 182.435 cv
244.926 183.037 317.704 191.641 317.704 191.641 cv
318.61 191.769 318.736 191.962 318.71 193.28 cv
318.656 196.006 316.962 203.475 315.646 208.011 cv
314.328 212.546 311.759 219.762 310.346 222.093 cv
309.661 223.22 309.452 223.314 308.618 222.938 cv
308.618 222.938 242.546 191.233 239.302 189.888 cv
239.302 189.888 238.919 191.09 237.416 193.481 cv
237.45 193.425 li
236.027 195.865 235.14 196.761 235.14 196.761 cv
237.838 199.013 296.562 242.852 296.562 242.852 cv
297.282 243.416 297.296 243.646 296.614 244.775 cv
295.204 247.108 290.002 252.73 286.594 255.999 cv
283.187 259.269 277.352 264.233 274.963 265.545 cv
273.807 266.18 273.579 266.156 273.045 265.413 cv
273.045 265.413 231.678 204.922 229.54 202.133 cv
229.54 202.133 228.608 202.983 226.112 204.303 cv
226.168 204.271 li
223.716 205.673 222.5 206.005 222.5 206.005 cv
223.71 209.303 252.646 276.632 252.646 276.632 cv
252.988 277.48 252.886 277.687 251.731 278.323 cv
249.343 279.639 242.026 281.907 237.44 283.035 cv
232.855 284.162 225.32 285.544 222.595 285.485 cv
221.276 285.456 221.09 285.323 220.999 284.412 cv
220.999 284.412 215.421 211.341 214.964 207.858 cv
214.964 207.858 213.733 208.127 210.91 208.022 cv
210.975 208.024 li
208.15 208.012 206.931 207.691 206.931 207.691 cv
206.33 211.152 197.725 283.93 197.725 283.93 cv
197.597 284.836 197.405 284.962 196.086 284.936 cv
193.36 284.881 185.89 283.187 181.355 281.871 cv
176.82 280.555 169.603 277.984 167.272 276.571 cv
166.146 275.888 166.051 275.677 166.428 274.845 cv
166.428 274.845 198.133 208.774 199.479 205.529 cv
199.479 205.529 198.277 205.145 195.885 203.643 cv
195.941 203.677 li
193.501 202.254 192.605 201.367 192.605 201.367 cv
190.354 204.064 146.513 262.789 146.513 262.789 cv
145.949 263.509 145.72 263.523 144.59 262.841 cv
142.258 261.43 136.636 256.228 133.366 252.821 cv
130.096 249.414 125.132 243.58 123.82 241.191 cv
123.186 240.034 123.209 239.805 123.952 239.271 cv
123.952 239.271 184.446 197.905 187.232 195.768 cv
187.232 195.768 186.383 194.835 185.063 192.338 cv
185.094 192.395 li
183.694 189.944 183.36 188.726 183.36 188.726 cv
180.063 189.936 112.733 218.874 112.733 218.874 cv
111.885 219.217 111.678 219.113 111.043 217.958 cv
109.727 215.57 107.458 208.254 106.331 203.668 cv
105.204 199.082 103.822 191.548 103.88 188.823 cv
103.907 187.505 104.043 187.318 104.953 187.227 cv
104.953 187.227 178.025 181.648 181.507 181.192 cv
181.507 181.192 181.239 179.959 181.344 177.137 cv
181.342 177.203 li
181.354 174.378 181.675 173.158 181.675 173.158 cv
178.214 172.557 105.435 163.953 105.435 163.953 cv
104.53 163.825 104.404 163.633 104.431 162.314 cv
104.484 159.589 106.179 152.119 107.495 147.584 cv
108.811 143.049 111.382 135.833 112.795 133.502 cv
113.478 132.374 113.688 132.28 114.521 132.657 cv
114.521 132.657 180.593 164.36 183.838 165.706 cv
183.838 165.706 184.221 164.504 185.723 162.113 cv
185.689 162.169 li
187.112 159.729 187.999 158.832 187.999 158.832 cv
185.302 156.581 126.578 112.742 126.578 112.742 cv
125.858 112.178 125.843 111.948 126.526 110.82 cv
127.935 108.487 133.137 102.864 136.544 99.5952 cv
139.953 96.3252 145.786 91.3622 148.176 90.0492 cv
149.332 89.4152 149.561 89.4382 150.094 90.1812 cv
150.094 90.1812 191.462 150.672 193.599 153.461 cv
193.599 153.461 194.531 152.611 197.028 151.291 cv
196.97 151.323 li
199.423 149.92 200.64 149.588 200.64 149.588 cv
199.429 146.29 170.492 78.9622 170.492 78.9622 cv
170.15 78.1141 170.253 77.9082 171.409 77.2722 cv
173.796 75.9562 181.112 73.6882 185.698 72.5602 cv
190.284 71.4332 197.818 70.0511 200.543 70.1091 cv
201.862 70.1382 202.049 70.2722 202.139 71.1821 cv
202.139 71.1821 207.718 144.252 208.174 147.736 cv
208.174 147.736 209.406 147.466 212.229 147.572 cv
212.164 147.57 li
214.988 147.582 216.208 147.903 216.208 147.903 cv
216.81 144.441 225.413 71.6652 225.413 71.6652 cv
225.541 70.7592 225.733 70.6332 227.052 70.6592 cv
229.778 70.7142 237.248 72.4072 241.783 73.7241 cv
246.318 75.0402 253.534 77.6102 255.864 79.0232 cv
256.992 79.7072 257.087 79.9172 256.71 80.7501 cv
256.71 80.7501 225.006 146.821 223.66 150.066 cv
223.66 150.066 224.862 150.448 227.254 151.951 cv
227.198 151.916 li
229.638 153.34 230.534 154.226 230.534 154.226 cv
232.785 151.53 276.625 92.8052 276.625 92.8052 cv
277.188 92.0852 277.418 92.0721 278.547 92.7542 cv
280.88 94.1632 286.502 99.3652 289.771 102.773 cv
293.041 106.18 298.005 112.014 299.317 114.404 cv
299.952 115.559 299.929 115.788 299.186 116.321 cv
299.186 116.321 238.694 157.689 235.906 159.826 cv
235.906 159.826 236.755 160.758 238.075 163.255 cv
cp
0 .35 .85 0 cmyk
f
grestore
283.251 242.79 mo
261.184 242.79 237.874 237.053 217.309 231.992 cv
215.403 231.523 213.517 231.059 211.652 230.604 cv
191.217 225.621 168.055 219.973 146.508 219.973 cv
138.758 219.973 131.809 220.679 125.263 222.131 cv
121.728 222.915 118.286 223.929 115.034 225.143 cv
103.924 229.29 li
102.534 220.67 li
100.554 208.4 94.6106 199.761 84.3626 194.259 cv
80.8516 192.375 77.0496 190.968 73.0236 189.48 cv
72.0276 189.112 71.0266 188.741 70.0196 188.36 cv
65.7886 186.761 61.6166 184.922 59.4936 182.226 cv
58.0966 180.451 57.9356 178.691 57.9356 177.52 cv
57.9356 176.349 58.0966 174.588 59.4926 172.814 cv
61.6226 170.11 65.8056 168.267 70.0096 166.678 cv
71.0266 166.293 72.0276 165.923 73.0226 165.555 cv
77.0486 164.066 80.8506 162.66 84.3626 160.775 cv
94.6096 155.276 100.553 146.638 102.534 134.365 cv
103.922 125.764 li
115.019 129.886 li
124.38 133.364 134.718 135.054 146.623 135.054 cv
168.082 135.054 191.231 129.413 211.653 124.436 cv
213.484 123.988 215.337 123.532 217.21 123.071 cv
237.806 117.999 261.151 112.25 283.251 112.25 cv
305.355 112.25 328.708 118.002 349.313 123.077 cv
351.176 123.536 353.022 123.99 354.847 124.437 cv
375.275 129.418 398.432 135.065 419.996 135.065 cv
427.747 135.064 434.696 134.359 441.241 132.908 cv
444.741 132.132 448.187 131.117 451.481 129.892 cv
462.584 125.764 li
463.968 134.372 li
465.942 146.636 471.886 155.272 482.139 160.774 cv
485.651 162.662 489.455 164.069 493.482 165.558 cv
494.474 165.925 495.472 166.295 496.478 166.674 cv
500.685 168.26 504.881 170.106 507.011 172.825 cv
508.399 174.587 508.56 176.349 508.56 177.52 cv
508.56 178.691 508.399 180.453 507.001 182.227 cv
504.886 184.927 500.694 186.771 496.48 188.359 cv
495.472 188.74 494.474 189.11 493.482 189.477 cv
489.454 190.966 485.651 192.373 482.142 194.258 cv
471.889 199.765 465.942 208.405 463.963 220.674 cv
462.575 229.276 li
451.478 225.154 li
442.114 221.675 431.774 219.984 419.867 219.984 cv
398.392 219.984 375.257 225.627 354.844 230.604 cv
352.988 231.057 351.11 231.519 349.214 231.986 cv
328.64 237.05 305.322 242.79 283.251 242.79 cv
0 0 0 0 cmyk
ef
283.251 242.79 mo
283.251 240.202 li
272.696 240.204 261.66 238.823 250.701 236.791 cv
239.741 234.761 228.865 232.087 218.584 229.556 cv
216.678 229.088 214.789 228.622 212.916 228.165 cv
202.697 225.674 191.708 222.992 180.476 220.921 cv
169.244 218.852 157.764 217.388 146.508 217.386 cv
138.426 217.384 131.052 218.125 124.101 219.668 cv
124.1 219.668 li
120.343 220.503 116.689 221.578 113.229 222.87 cv
107.058 225.174 li
106.286 220.385 li
105.26 214.036 103.198 208.528 99.9616 203.822 cv
96.7306 199.119 92.2946 195.227 86.6886 192.221 cv
82.8466 190.162 78.8346 188.691 74.8146 187.202 cv
73.8186 186.833 72.8276 186.467 71.8416 186.094 cv
69.8026 185.325 67.8736 184.527 66.3076 183.675 cv
64.7346 182.822 63.5496 181.933 62.8156 180.997 cv
61.8606 179.787 61.7076 178.525 61.7096 177.52 cv
61.7076 176.515 61.8606 175.252 62.8146 174.043 cv
62.8396 174.012 li
62.8146 174.044 li
63.5516 173.103 64.7426 172.21 66.3156 171.357 cv
67.8826 170.504 69.8066 169.708 71.8316 168.944 cv
71.8296 168.944 li
72.8276 168.567 73.8196 168.2 74.8136 167.832 cv
74.8136 167.833 li
78.8336 166.344 82.8466 164.873 86.6896 162.813 cv
86.6886 162.813 li
92.2946 159.809 96.7306 155.918 99.9606 151.215 cv
103.198 146.509 105.259 141 106.286 134.65 cv
107.056 129.871 li
113.222 132.162 li
123.158 135.86 134.204 137.648 146.623 137.642 cv
157.835 137.64 169.29 136.177 180.507 134.111 cv
191.721 132.042 202.704 129.362 212.917 126.874 cv
212.918 126.873 li
214.756 126.425 216.613 125.968 218.485 125.507 cv
228.782 122.971 239.674 120.291 250.651 118.257 cv
261.627 116.22 272.679 114.836 283.251 114.838 cv
293.824 114.836 304.88 116.221 315.859 118.259 cv
326.84 120.294 337.736 122.975 348.038 125.513 cv
349.9 125.972 351.749 126.427 353.581 126.875 cv
353.583 126.875 li
363.798 129.366 374.785 132.047 386.015 134.118 cv
397.247 136.186 408.732 137.65 419.994 137.652 cv
419.995 137.652 li
419.995 135.068 li
419.321 137.611 li
419.639 137.65 419.878 137.652 419.995 137.652 cv
419.995 135.068 li
419.321 137.611 li
419.655 137.652 li
419.996 137.652 li
428.078 137.653 435.452 136.913 442.402 135.371 cv
446.129 134.543 449.784 133.466 453.279 132.167 cv
459.448 129.874 li
460.217 134.656 li
461.239 141.002 463.299 146.508 466.536 151.213 cv
469.766 155.916 474.204 159.807 479.813 162.813 cv
479.81 162.811 li
483.655 164.875 487.67 166.346 491.69 167.836 cv
492.682 168.202 493.67 168.568 494.657 168.941 cv
496.686 169.704 498.612 170.499 500.181 171.353 cv
501.756 172.207 502.947 173.103 503.685 174.049 cv
503.69 174.056 li
504.633 175.247 504.789 176.514 504.786 177.52 cv
504.788 178.526 504.635 179.789 503.681 180.997 cv
503.669 181.012 li
503.677 181.003 li
502.948 181.937 501.762 182.828 500.188 183.68 cv
498.62 184.531 496.692 185.327 494.663 186.091 cv
494.65 186.096 li
494.659 186.092 li
493.67 186.467 492.682 186.832 491.689 187.199 cv
487.669 188.688 483.655 190.16 479.815 192.221 cv
474.207 195.228 469.768 199.121 466.536 203.826 cv
463.298 208.533 461.237 214.042 460.212 220.389 cv
459.441 225.169 li
453.276 222.878 li
443.336 219.18 432.289 217.39 419.867 217.396 cv
408.646 217.398 397.19 218.862 385.976 220.928 cv
374.765 222.997 363.788 225.677 353.58 228.166 cv
351.716 228.62 349.835 229.083 347.94 229.55 cv
337.654 232.082 326.773 234.758 315.81 236.789 cv
304.847 238.822 293.808 240.204 283.251 240.202 cv
283.251 242.79 li
283.251 245.378 li
294.765 245.376 306.421 243.888 317.778 241.786 cv
329.134 239.68 340.2 236.954 350.488 234.422 cv
352.385 233.955 354.259 233.493 356.109 233.043 cv
366.313 230.553 377.109 227.924 387.937 225.927 cv
398.763 223.928 409.612 222.57 419.867 222.572 cv
431.26 222.578 440.891 224.171 449.68 227.429 cv
465.709 233.384 li
467.713 220.959 li
468.667 215.038 470.568 210.092 473.362 206.035 cv
476.162 201.975 479.823 198.794 484.47 196.295 cv
487.647 194.585 491.239 193.243 495.273 191.755 cv
496.266 191.387 497.275 191.014 498.303 190.625 cv
498.299 190.627 li
500.482 189.802 502.758 188.883 504.869 187.74 cv
506.972 186.598 508.94 185.217 510.326 183.451 cv
510.321 183.457 li
512.163 181.117 512.332 178.856 512.334 177.52 cv
512.331 176.184 512.165 173.926 510.331 171.594 cv
510.336 171.6 li
508.944 169.828 506.972 168.44 504.866 167.295 cv
502.753 166.15 500.476 165.229 498.296 164.406 cv
497.274 164.02 496.265 163.647 495.272 163.28 cv
491.24 161.791 487.648 160.449 484.467 158.737 cv
484.464 158.736 li
479.819 156.24 476.159 153.061 473.362 149.004 cv
470.57 144.95 468.671 140.007 467.719 134.088 cv
465.719 121.654 li
449.681 127.617 li
446.59 128.766 443.354 129.72 440.08 130.446 cv
433.94 131.805 427.415 132.475 419.996 132.476 cv
419.996 135.065 li
420.672 132.518 li
420.353 132.479 420.112 132.477 419.995 132.476 cv
419.994 132.476 li
409.694 132.479 398.818 131.119 387.974 129.119 cv
377.129 127.121 366.324 124.489 356.112 121.998 cv
356.113 121.998 li
354.294 121.554 352.452 121.1 350.589 120.642 cv
340.285 118.104 329.202 115.372 317.829 113.262 cv
306.455 111.155 294.782 109.663 283.251 109.662 cv
271.722 109.663 260.051 111.154 248.682 113.26 cv
237.312 115.368 226.234 118.1 215.934 120.636 cv
214.062 121.096 212.212 121.552 210.387 121.997 cv
210.318 122.014 li
210.389 121.997 li
200.18 124.486 189.377 127.116 178.546 129.112 cv
167.718 131.111 156.869 132.469 146.623 132.466 cv
135.232 132.46 125.602 130.868 116.817 127.61 cv
100.789 121.656 li
98.7826 134.08 li
97.8276 140.003 95.9266 144.95 93.1346 149.006 cv
90.3366 153.065 86.6776 156.242 82.0366 158.736 cv
82.0366 158.737 li
78.8556 160.447 75.2636 161.789 71.2306 163.277 cv
71.2296 163.277 li
70.2366 163.645 69.2246 164.019 68.1886 164.411 cv
68.1206 164.436 li
68.1866 164.411 li
66.0086 165.236 63.7376 166.156 61.6316 167.299 cv
59.5306 168.441 57.5636 169.822 56.1726 171.585 cv
56.1466 171.616 li
56.1716 171.585 li
54.3336 173.925 54.1636 176.184 54.1616 177.52 cv
54.1636 178.856 54.3336 181.115 56.1726 183.455 cv
56.2666 183.574 li
56.1726 183.455 li
57.5606 185.215 59.5236 186.593 61.6246 187.734 cv
63.7316 188.876 66.0056 189.797 68.1976 190.627 cv
69.2246 191.016 70.2376 191.39 71.2316 191.758 cv
75.2646 193.246 78.8556 194.588 82.0356 196.297 cv
82.0356 196.296 li
86.6776 198.793 90.3366 201.972 93.1346 206.031 cv
95.9276 210.087 97.8286 215.033 98.7826 220.954 cv
100.792 233.406 li
116.838 227.416 li
119.884 226.279 123.114 225.328 126.425 224.593 cv
126.596 224.555 li
126.424 224.593 li
132.565 223.233 139.09 222.563 146.508 222.561 cv
156.8 222.559 167.673 223.919 178.517 225.919 cv
189.363 227.918 200.172 230.551 210.388 233.043 cv
212.246 233.495 214.129 233.959 216.033 234.428 cv
226.318 236.958 237.381 239.684 248.733 241.788 cv
260.087 243.889 271.739 245.376 283.251 245.378 cv
283.251 242.79 li
0 1 1 .25 cmyk
f
110.974 135.005 mo
108.956 147.496 102.891 158.225 89.5965 165.36 cv
84.5915 168.046 79.4445 169.76 74.1175 171.773 cv
72.2115 172.493 68.2035 174.007 66.9665 175.579 cv
66.5145 176.152 66.4275 176.83 66.4275 177.519 cv
66.4275 178.202 66.5145 178.886 66.9665 179.459 cv
68.2035 181.031 72.2115 182.539 74.1175 183.26 cv
79.4445 185.273 84.5915 186.987 89.5965 189.674 cv
102.884 196.807 108.956 207.532 110.974 220.028 cv
114.748 218.619 118.646 217.478 122.649 216.59 cv
152.371 209.998 185.693 218.094 214.497 225.117 cv
236.167 230.4 260.714 236.966 283.251 236.966 cv
305.783 236.966 330.334 230.4 351.998 225.117 cv
384.916 217.09 422.833 207.889 455.521 220.033 cv
457.538 207.537 463.61 196.813 476.904 189.674 cv
481.904 186.987 487.049 185.273 492.377 183.26 cv
494.289 182.539 498.297 181.031 499.528 179.459 cv
499.98 178.886 500.067 178.202 500.067 177.519 cv
500.067 176.83 499.98 176.152 499.528 175.579 cv
498.297 174.007 494.289 172.493 492.377 171.773 cv
487.049 169.76 481.904 168.046 476.904 165.36 cv
463.61 158.225 457.538 147.502 455.527 135.01 cv
451.752 136.414 447.855 137.56 443.851 138.449 cv
414.129 145.036 380.8 136.945 351.998 129.921 cv
330.334 124.633 305.783 118.072 283.251 118.072 cv
260.714 118.072 236.167 124.633 214.497 129.921 cv
181.581 137.944 143.661 147.149 110.974 135.005 cv
0 0 0 0 cmyk
ef
110.974 135.005 mo
107.222 134.72 li
106.247 140.766 104.299 146.301 101.083 151.113 cv
97.8615 155.928 93.4075 160.024 87.2715 163.321 cv
82.6545 165.804 77.7455 167.453 72.2955 169.506 cv
72.2955 169.507 li
71.3335 169.871 69.7385 170.47 68.1365 171.232 cv
67.3325 171.616 66.5195 172.042 65.7505 172.538 cv
64.9845 173.038 64.2445 173.599 63.6455 174.35 cv
63.1715 174.953 62.9315 175.553 62.8035 176.086 cv
62.6765 176.622 62.6545 177.1 62.6525 177.519 cv
62.6545 177.937 62.6765 178.414 62.8025 178.949 cv
62.9305 179.482 63.1695 180.083 63.6455 180.688 cv
64.2455 181.441 64.9855 182.001 65.7525 182.5 cv
66.9065 183.241 68.1625 183.837 69.3305 184.344 cv
70.4945 184.848 71.5795 185.255 72.2955 185.526 cv
77.7455 187.581 82.6545 189.229 87.2715 191.711 cv
93.4055 195.008 97.8585 199.104 101.081 203.918 cv
104.298 208.729 106.247 214.265 107.222 220.312 cv
107.84 224.145 li
112.777 222.301 li
116.345 220.97 120.025 219.892 123.811 219.052 cv
131.134 217.428 138.73 216.738 146.507 216.738 cv
157.518 216.736 168.884 218.129 180.154 220.188 cv
191.426 222.244 202.591 224.96 213.232 227.555 cv
224.029 230.187 235.654 233.17 247.505 235.51 cv
259.357 237.847 271.447 239.551 283.251 239.554 cv
295.051 239.551 307.141 237.847 318.993 235.51 cv
330.844 233.17 342.469 230.187 353.262 227.555 cv
363.982 224.941 375.14 222.227 386.372 220.178 cv
397.603 218.128 408.897 216.747 419.866 216.748 cv
431.614 216.752 442.955 218.312 453.724 222.309 cv
458.656 224.141 li
459.273 220.318 li
460.248 214.27 462.197 208.735 465.415 203.923 cv
468.638 199.108 473.094 195.011 479.231 191.711 cv
483.841 189.229 488.749 187.581 494.199 185.526 cv
494.196 185.528 li
495.16 185.164 496.757 184.566 498.359 183.805 cv
499.164 183.421 499.978 182.995 500.748 182.499 cv
501.514 181.999 502.255 181.438 502.854 180.683 cv
502.85 180.689 li
503.326 180.083 503.564 179.482 503.692 178.949 cv
503.819 178.414 503.84 177.937 503.842 177.519 cv
503.84 177.1 503.819 176.622 503.691 176.086 cv
503.563 175.553 503.323 174.952 502.85 174.349 cv
502.854 174.355 li
502.256 173.601 501.515 173.04 500.75 172.54 cv
499.596 171.797 498.34 171.2 497.17 170.691 cv
496.005 170.186 494.918 169.778 494.196 169.505 cv
494.199 169.506 li
488.749 167.453 483.841 165.804 479.232 163.323 cv
479.23 163.321 li
473.093 160.024 468.638 155.929 465.416 151.115 cv
462.198 146.305 460.25 140.771 459.279 134.726 cv
458.663 130.9 li
453.728 132.735 li
450.154 134.064 446.471 135.147 442.69 135.986 cv
435.368 137.608 427.773 138.298 419.996 138.298 cv
408.984 138.3 397.616 136.907 386.344 134.849 cv
375.071 132.793 363.903 130.078 353.262 127.483 cv
342.47 124.849 330.844 121.865 318.993 119.527 cv
307.141 117.19 295.051 115.487 283.251 115.484 cv
271.447 115.487 259.358 117.19 247.505 119.527 cv
235.654 121.865 224.027 124.849 213.232 127.483 cv
213.232 127.483 li
202.512 130.096 191.354 132.809 180.12 134.858 cv
168.887 136.908 157.591 138.29 146.622 138.288 cv
134.878 138.285 123.537 136.726 112.771 132.729 cv
107.84 130.898 li
107.222 134.72 li
110.974 135.005 li
109.175 137.281 li
121.193 141.749 133.91 143.468 146.622 143.464 cv
158.514 143.463 170.432 141.98 182.061 139.86 cv
193.688 137.738 205.035 134.973 215.76 132.36 cv
215.831 132.342 li
215.762 132.36 li
226.635 129.705 238.118 126.764 249.591 124.501 cv
261.063 122.234 272.517 120.657 283.251 120.66 cv
293.98 120.657 305.434 122.234 316.906 124.501 cv
328.38 126.764 339.863 129.705 350.732 132.359 cv
361.38 134.955 372.737 137.723 384.403 139.852 cv
396.072 141.978 408.058 143.473 419.996 143.474 cv
428.421 143.475 436.826 142.726 445.012 140.911 cv
449.239 139.973 453.352 138.764 457.327 137.285 cv
455.527 135.01 li
451.776 135.294 li
452.815 141.74 454.908 147.814 458.553 153.272 cv
462.193 158.726 467.421 163.561 474.578 167.398 cv
474.576 167.396 li
479.966 170.288 485.35 172.067 490.556 174.04 cv
490.559 174.041 li
491.504 174.396 492.866 174.915 494.054 175.482 cv
494.644 175.763 495.183 176.054 495.572 176.306 cv
495.963 176.554 496.185 176.772 496.203 176.803 cv
496.208 176.809 li
496.369 176.749 li
496.199 176.798 li
496.208 176.809 li
496.369 176.749 li
496.199 176.798 li
496.2 176.798 496.23 176.85 496.254 176.974 cv
496.279 177.097 496.295 177.284 496.294 177.519 cv
496.295 177.785 496.273 177.991 496.243 178.112 cv
496.205 178.229 li
496.198 178.242 li
496.388 178.296 li
496.208 178.229 li
496.198 178.242 li
496.388 178.296 li
496.208 178.229 li
496.203 178.235 li
496.187 178.266 495.965 178.483 495.574 178.731 cv
494.991 179.11 494.073 179.566 493.143 179.966 cv
492.209 180.37 491.273 180.724 490.56 180.992 cv
490.547 180.996 li
490.556 180.994 li
485.35 182.967 479.966 184.745 474.576 187.636 cv
467.421 191.475 462.193 196.31 458.553 201.766 cv
454.907 207.225 452.812 213.301 451.77 219.749 cv
455.521 220.033 li
457.319 217.758 li
445.299 213.289 432.582 211.568 419.866 211.573 cv
407.975 211.574 396.058 213.056 384.431 215.177 cv
372.804 217.299 361.458 220.064 350.733 222.679 cv
339.863 225.331 328.38 228.272 316.905 230.536 cv
305.434 232.803 293.98 234.382 283.251 234.378 cv
272.517 234.382 261.064 232.803 249.592 230.536 cv
238.118 228.272 226.635 225.331 215.76 222.678 cv
205.115 220.083 193.76 217.315 182.096 215.186 cv
170.43 213.058 158.445 211.563 146.507 211.562 cv
138.081 211.561 129.674 212.311 121.489 214.127 cv
121.488 214.127 li
117.267 215.065 113.151 216.269 109.17 217.755 cv
110.974 220.028 li
114.725 219.744 li
113.684 213.295 111.589 207.221 107.942 201.762 cv
104.303 196.307 99.0775 191.472 91.9235 187.636 cv
86.5275 184.745 81.1445 182.967 75.9385 180.994 cv
75.9395 180.994 li
74.9935 180.637 73.6305 180.119 72.4425 179.552 cv
71.8515 179.272 71.3115 178.981 70.9225 178.729 cv
70.5305 178.481 70.3065 178.264 70.2875 178.23 cv
70.1085 178.296 li
70.2965 178.242 li
70.2875 178.23 li
70.1085 178.296 li
70.2965 178.242 li
70.2955 178.242 70.2655 178.188 70.2415 178.063 cv
70.2165 177.938 70.2005 177.751 70.2015 177.519 cv
70.2005 177.25 70.2215 177.044 70.2515 176.925 cv
70.2885 176.81 li
70.2955 176.797 li
70.1265 176.749 li
70.2875 176.809 li
70.2955 176.797 li
70.1265 176.749 li
70.2875 176.809 li
70.3065 176.774 70.5325 176.556 70.9245 176.307 cv
71.5105 175.926 72.4295 175.468 73.3595 175.067 cv
74.2935 174.662 75.2285 174.308 75.9395 174.04 cv
75.9385 174.04 li
81.1445 172.067 86.5275 170.288 91.9235 167.398 cv
99.0805 163.561 104.307 158.724 107.945 153.269 cv
111.59 147.81 113.684 141.735 114.725 135.29 cv
110.974 135.005 li
109.175 137.281 li
110.974 135.005 li
f
110.974 135.005 mo
108.956 147.496 102.891 158.225 89.5965 165.36 cv
84.5915 168.046 79.4445 169.76 74.1175 171.773 cv
72.2115 172.493 68.2035 174.007 66.9665 175.579 cv
66.5145 176.152 66.4275 176.83 66.4275 177.519 cv
66.4275 178.202 66.5145 178.886 66.9665 179.459 cv
68.2035 181.031 72.2115 182.539 74.1175 183.26 cv
79.4445 185.273 84.5915 186.987 89.5965 189.674 cv
102.884 196.807 108.956 207.532 110.974 220.028 cv
114.748 218.619 118.646 217.478 122.649 216.59 cv
152.371 209.998 185.693 218.094 214.497 225.117 cv
236.167 230.4 260.714 236.966 283.251 236.966 cv
305.783 236.966 330.334 230.4 351.998 225.117 cv
384.916 217.09 422.833 207.889 455.521 220.033 cv
457.538 207.537 463.61 196.813 476.904 189.674 cv
481.904 186.987 487.049 185.273 492.377 183.26 cv
494.289 182.539 498.297 181.031 499.528 179.459 cv
499.98 178.886 500.067 178.202 500.067 177.519 cv
500.067 176.83 499.98 176.152 499.528 175.579 cv
498.297 174.007 494.289 172.493 492.377 171.773 cv
487.049 169.76 481.904 168.046 476.904 165.36 cv
463.61 158.225 457.538 147.502 455.527 135.01 cv
451.752 136.414 447.855 137.56 443.851 138.449 cv
414.129 145.036 380.8 136.945 351.998 129.921 cv
330.334 124.633 305.783 118.072 283.251 118.072 cv
260.714 118.072 236.167 124.633 214.497 129.921 cv
181.581 137.944 143.661 147.149 110.974 135.005 cv
ef
3.125 lw
0 lj
10 ml
[] 0 dsh
110.973 135.005 mo
110.973 135.005 li
0 .35 .85 0 cmyk
@
[0 6.364 ] 0 dsh
109.859 140.22 mo
107.087 150.474 101.001 159.24 89.5979 165.36 cv
84.5919 168.047 79.4449 169.76 74.1169 171.774 cv
72.2129 172.494 68.2029 174.008 66.9659 175.58 cv
66.5159 176.153 66.4269 176.831 66.4269 177.52 cv
66.4269 178.203 66.5159 178.887 66.9659 179.46 cv
68.2029 181.032 72.2129 182.54 74.1169 183.261 cv
79.4449 185.274 84.5919 186.988 89.5979 189.674 cv
101.948 196.305 108.065 206.039 110.485 217.413 cv
@
[] 0 dsh
110.973 220.028 mo
110.973 220.028 li
@
118.543 218.995 mo
119.508 218.725 119.97 217.97 119.577 217.308 cv
119.183 216.646 118.082 216.329 117.117 216.599 cv
116.151 216.869 115.689 217.624 116.083 218.286 cv
116.476 218.948 117.578 219.265 118.543 218.995 cv
125.517 217.345 mo
126.52 217.149 127.101 216.433 126.816 215.746 cv
126.532 215.059 125.488 214.66 124.486 214.855 cv
123.482 215.051 122.901 215.767 123.187 216.454 cv
123.471 217.142 124.515 217.54 125.517 217.345 cv
132.719 216.223 mo
133.747 216.101 134.436 215.432 134.258 214.727 cv
134.08 214.023 133.104 213.551 132.077 213.672 cv
131.05 213.794 130.362 214.463 130.539 215.168 cv
130.717 215.873 131.693 216.344 132.719 216.223 cv
140.07 215.605 mo
141.109 215.552 141.888 214.931 141.811 214.218 cv
141.733 213.505 140.828 212.971 139.788 213.024 cv
138.749 213.078 137.97 213.699 138.047 214.411 cv
138.125 215.124 139.03 215.658 140.07 215.605 cv
147.491 215.447 mo
148.533 215.455 149.387 214.882 149.397 214.167 cv
149.408 213.452 148.573 212.867 147.53 212.859 cv
146.489 212.852 145.634 213.425 145.624 214.14 cv
145.613 214.854 146.448 215.44 147.491 215.447 cv
154.929 215.694 mo
155.967 215.754 156.88 215.226 156.968 214.513 cv
157.055 213.802 156.284 213.175 155.246 213.115 cv
154.207 213.055 153.295 213.584 153.207 214.296 cv
153.119 215.008 153.89 215.634 154.929 215.694 cv
162.347 216.289 mo
163.378 216.393 164.337 215.904 164.489 215.197 cv
164.641 214.49 163.929 213.833 162.898 213.728 cv
161.867 213.624 160.908 214.112 160.755 214.819 cv
160.603 215.526 161.316 216.184 162.347 216.289 cv
169.723 217.176 mo
170.745 217.317 171.739 216.864 171.945 216.163 cv
172.152 215.463 171.491 214.78 170.469 214.638 cv
169.447 214.497 168.452 214.951 168.246 215.651 cv
168.04 216.352 168.702 217.035 169.723 217.176 cv
177.048 218.305 mo
178.06 218.477 179.082 218.052 179.332 217.359 cv
179.581 216.665 178.964 215.963 177.952 215.792 cv
176.94 215.621 175.917 216.045 175.668 216.739 cv
175.418 217.432 176.035 218.134 177.048 218.305 cv
184.319 219.632 mo
185.322 219.827 186.365 219.428 186.65 218.741 cv
186.935 218.053 186.353 217.338 185.35 217.142 cv
184.348 216.947 183.304 217.346 183.02 218.034 cv
182.735 218.721 183.317 219.437 184.319 219.632 cv
191.543 221.115 mo
192.538 221.329 193.597 220.949 193.908 220.267 cv
194.22 219.585 193.667 218.859 192.672 218.646 cv
191.679 218.432 190.619 218.811 190.307 219.493 cv
189.996 220.175 190.549 220.901 191.543 221.115 cv
198.729 222.717 mo
199.717 222.944 200.787 222.579 201.118 221.902 cv
201.45 221.225 200.918 220.491 199.929 220.263 cv
198.942 220.037 197.871 220.401 197.541 221.079 cv
197.209 221.757 197.741 222.49 198.729 222.717 cv
205.89 224.403 mo
206.874 224.639 207.95 224.283 208.294 223.609 cv
208.638 222.934 208.12 222.196 207.136 221.96 cv
206.152 221.724 205.076 222.08 204.732 222.754 cv
204.387 223.429 204.907 224.167 205.89 224.403 cv
213.038 226.135 mo
214.02 226.374 215.099 226.022 215.449 225.349 cv
215.797 224.676 215.285 223.936 214.303 223.696 cv
213.32 223.457 212.241 223.809 211.893 224.482 cv
211.543 225.156 212.057 225.896 213.038 226.135 cv
220.181 227.886 mo
221.161 228.128 222.242 227.778 222.594 227.105 cv
222.946 226.433 222.437 225.692 221.456 225.451 cv
220.474 225.209 219.394 225.559 219.042 226.232 cv
218.69 226.904 219.2 227.645 220.181 227.886 cv
227.336 229.637 mo
228.318 229.875 229.396 229.522 229.744 228.848 cv
230.091 228.174 229.575 227.435 228.592 227.197 cv
227.61 226.959 226.532 227.312 226.185 227.986 cv
225.838 228.66 226.353 229.399 227.336 229.637 cv
234.531 231.346 mo
235.518 231.575 236.589 231.212 236.923 230.536 cv
237.256 229.858 236.727 229.124 235.74 228.895 cv
234.753 228.666 233.682 229.029 233.348 229.706 cv
233.014 230.383 233.543 231.117 234.531 231.346 cv
241.783 232.974 mo
242.777 233.189 243.837 232.81 244.149 232.128 cv
244.462 231.447 243.911 230.72 242.916 230.506 cv
241.923 230.291 240.863 230.67 240.55 231.352 cv
240.237 232.033 240.789 232.759 241.783 232.974 cv
249.111 234.479 mo
250.113 234.673 251.156 234.273 251.44 233.585 cv
251.722 232.897 251.139 232.182 250.137 231.988 cv
249.134 231.794 248.091 232.194 247.807 232.881 cv
247.524 233.569 248.108 234.284 249.11 234.479 cv
249.111 234.479 li
256.527 235.813 mo
257.54 235.98 258.559 235.552 258.803 234.858 cv
259.047 234.163 258.424 233.464 257.411 233.297 cv
256.398 233.13 255.377 233.557 255.134 234.252 cv
254.891 234.947 255.514 235.645 256.527 235.813 cv
264.043 236.923 mo
265.067 237.055 266.054 236.593 266.247 235.891 cv
266.44 235.189 265.766 234.512 264.742 234.38 cv
263.718 234.248 262.731 234.71 262.538 235.412 cv
262.345 236.115 263.019 236.791 264.043 236.923 cv
271.657 237.744 mo
272.692 237.832 273.634 237.328 273.763 236.62 cv
273.89 235.91 273.156 235.264 272.122 235.176 cv
271.087 235.088 270.145 235.592 270.017 236.3 cv
269.889 237.01 270.623 237.656 271.657 237.744 cv
279.364 238.199 mo
280.405 238.231 281.287 237.679 281.335 236.965 cv
281.382 236.251 280.576 235.646 279.535 235.614 cv
278.494 235.581 277.612 236.133 277.564 236.847 cv
277.517 237.561 278.323 238.166 279.364 238.199 cv
287.121 238.199 mo
288.163 238.167 288.968 237.562 288.921 236.848 cv
288.874 236.134 287.991 235.581 286.951 235.614 cv
285.91 235.646 285.104 236.251 285.151 236.965 cv
285.198 237.679 286.081 238.232 287.121 238.199 cv
294.828 237.745 mo
295.862 237.658 296.596 237.011 296.469 236.302 cv
296.34 235.593 295.399 235.089 294.364 235.177 cv
293.33 235.265 292.596 235.911 292.723 236.62 cv
292.852 237.33 293.793 237.833 294.828 237.745 cv
302.443 236.925 mo
303.467 236.793 304.14 236.116 303.948 235.414 cv
303.754 234.712 302.768 234.249 301.744 234.382 cv
300.72 234.514 300.046 235.19 300.239 235.893 cv
300.431 236.595 301.418 237.057 302.443 236.925 cv
309.951 235.816 mo
310.964 235.649 311.588 234.95 311.344 234.256 cv
311.101 233.56 310.082 233.133 309.068 233.3 cv
308.054 233.467 307.431 234.166 307.674 234.861 cv
307.919 235.556 308.938 235.983 309.951 235.816 cv
317.362 234.483 mo
318.366 234.29 318.949 233.575 318.666 232.886 cv
318.382 232.198 317.34 231.799 316.336 231.992 cv
315.334 232.187 314.751 232.902 315.034 233.59 cv
315.317 234.277 316.359 234.677 317.362 234.483 cv
324.688 232.98 mo
325.683 232.765 326.234 232.039 325.921 231.357 cv
325.609 230.676 324.549 230.297 323.555 230.511 cv
322.561 230.726 322.009 231.453 322.322 232.135 cv
322.634 232.816 323.694 233.194 324.688 232.98 cv
331.942 231.352 mo
332.93 231.123 333.459 230.389 333.125 229.712 cv
332.791 229.035 331.72 228.671 330.734 228.901 cv
329.746 229.13 329.217 229.864 329.551 230.541 cv
329.885 231.218 330.956 231.581 331.942 231.352 cv
339.143 229.642 mo
340.126 229.403 340.642 228.664 340.294 227.991 cv
339.947 227.317 338.869 226.963 337.887 227.201 cv
336.904 227.439 336.389 228.179 336.736 228.852 cv
337.083 229.526 338.161 229.879 339.143 229.642 cv
346.302 227.89 mo
347.283 227.648 347.793 226.908 347.441 226.235 cv
347.089 225.562 346.009 225.212 345.028 225.454 cv
344.047 225.696 343.537 226.436 343.889 227.109 cv
344.241 227.781 345.322 228.131 346.302 227.89 cv
353.445 226.138 mo
354.426 225.898 354.94 225.158 354.59 224.485 cv
354.242 223.812 353.162 223.46 352.18 223.7 cv
351.198 223.939 350.686 224.678 351.034 225.352 cv
351.384 226.026 352.463 226.377 353.445 226.138 cv
360.59 224.406 mo
361.573 224.17 362.092 223.432 361.747 222.758 cv
361.404 222.083 360.328 221.728 359.343 221.963 cv
358.359 222.2 357.841 222.937 358.185 223.612 cv
358.529 224.287 359.606 224.642 360.59 224.406 cv
367.744 222.721 mo
368.732 222.494 369.264 221.761 368.933 221.083 cv
368.601 220.405 367.531 220.041 366.543 220.268 cv
365.554 220.496 365.023 221.229 365.354 221.907 cv
365.686 222.584 366.756 222.949 367.744 222.721 cv
374.925 221.119 mo
375.92 220.905 376.473 220.179 376.16 219.497 cv
375.849 218.815 374.79 218.436 373.795 218.65 cv
372.801 218.864 372.248 219.59 372.56 220.271 cv
372.872 220.953 373.931 221.332 374.925 221.119 cv
382.147 219.635 mo
383.149 219.439 383.732 218.723 383.447 218.036 cv
383.161 217.348 382.118 216.95 381.115 217.145 cv
380.113 217.341 379.532 218.057 379.816 218.744 cv
380.101 219.431 381.145 219.83 382.147 219.635 cv
389.42 218.306 mo
390.431 218.135 391.049 217.434 390.799 216.74 cv
390.549 216.046 389.526 215.623 388.515 215.794 cv
387.502 215.965 386.885 216.667 387.135 217.36 cv
387.385 218.055 388.408 218.478 389.42 218.306 cv
396.746 217.177 mo
397.768 217.035 398.429 216.353 398.223 215.652 cv
398.017 214.952 397.023 214.498 396.001 214.64 cv
394.98 214.781 394.318 215.463 394.524 216.163 cv
394.729 216.864 395.725 217.318 396.746 217.177 cv
404.125 216.291 mo
405.157 216.186 405.87 215.529 405.718 214.822 cv
405.566 214.115 404.608 213.626 403.577 213.73 cv
402.545 213.834 401.832 214.492 401.984 215.199 cv
402.136 215.906 403.095 216.395 404.125 216.291 cv
411.548 215.7 mo
412.586 215.64 413.358 215.014 413.271 214.302 cv
413.185 213.59 412.272 213.061 411.234 213.12 cv
410.196 213.18 409.424 213.805 409.51 214.517 cv
409.598 215.23 410.51 215.759 411.548 215.7 cv
418.989 215.458 mo
420.032 215.451 420.868 214.866 420.858 214.151 cv
420.849 213.437 419.996 212.862 418.954 212.87 cv
417.911 212.877 417.075 213.461 417.085 214.176 cv
417.094 214.89 417.948 215.465 418.989 215.458 cv
426.412 215.621 mo
427.451 215.675 428.358 215.141 428.437 214.429 cv
428.515 213.716 427.737 213.095 426.698 213.041 cv
425.658 212.987 424.752 213.52 424.674 214.233 cv
424.595 214.946 425.374 215.568 426.412 215.621 cv
433.762 216.243 mo
434.788 216.365 435.765 215.893 435.943 215.189 cv
436.121 214.485 435.433 213.815 434.406 213.693 cv
433.38 213.571 432.403 214.043 432.225 214.748 cv
432.046 215.452 432.735 216.121 433.762 216.243 cv
440.967 217.364 mo
441.969 217.56 443.013 217.16 443.296 216.472 cv
443.58 215.785 442.998 215.069 441.996 214.875 cv
440.992 214.68 439.95 215.079 439.665 215.767 cv
439.381 216.455 439.963 217.17 440.967 217.364 cv
447.943 219.007 mo
448.909 219.276 450.01 218.957 450.401 218.296 cv
450.794 217.633 450.329 216.878 449.364 216.61 cv
448.398 216.34 447.297 216.66 446.905 217.321 cv
446.513 217.984 446.978 218.739 447.943 219.007 cv
f
455.522 220.034 mo
455.522 220.034 li
@
458.491 215.055 mo
458.681 214.352 458.004 213.677 456.98 213.547 cv
455.955 213.416 454.97 213.88 454.78 214.583 cv
454.59 215.286 455.267 215.961 456.292 216.091 cv
457.316 216.222 458.301 215.758 458.491 215.055 cv
460.18 210.035 mo
460.46 209.347 459.875 208.633 458.872 208.44 cv
457.869 208.247 456.827 208.649 456.545 209.337 cv
456.264 210.025 456.849 210.74 457.854 210.932 cv
458.857 211.125 459.899 210.723 460.18 210.035 cv
462.574 205.179 mo
462.963 204.516 462.495 203.762 461.528 203.495 cv
460.56 203.228 459.462 203.549 459.073 204.213 cv
458.684 204.876 459.153 205.63 460.12 205.896 cv
461.086 206.163 462.185 205.842 462.574 205.179 cv
465.779 200.578 mo
466.289 199.955 465.967 199.167 465.059 198.816 cv
464.15 198.466 463 198.687 462.489 199.31 cv
461.978 199.933 462.3 200.722 463.209 201.072 cv
464.117 201.422 465.268 201.201 465.779 200.578 cv
469.862 196.347 mo
470.5 195.782 470.351 194.97 469.527 194.532 cv
468.703 194.094 467.517 194.197 466.879 194.762 cv
466.241 195.327 466.39 196.139 467.214 196.577 cv
468.038 197.015 469.223 196.912 469.862 196.347 cv
474.823 192.602 mo
475.582 192.113 475.62 191.293 474.906 190.773 cv
474.191 190.252 472.997 190.227 472.238 190.717 cv
471.479 191.206 471.442 192.025 472.156 192.545 cv
472.87 193.067 474.064 193.091 474.823 192.602 cv
480.583 189.426 mo
481.441 189.02 481.657 188.214 481.065 187.625 cv
480.474 187.037 479.299 186.889 478.441 187.295 cv
477.583 187.7 477.367 188.506 477.958 189.094 cv
478.55 189.683 479.725 189.831 480.583 189.426 cv
486.983 186.745 mo
487.894 186.398 488.222 185.61 487.716 184.986 cv
487.21 184.362 486.061 184.136 485.15 184.484 cv
484.239 184.831 483.911 185.619 484.418 186.243 cv
484.924 186.868 486.072 187.093 486.983 186.745 cv
493.729 184.227 mo
494.641 183.881 494.972 183.093 494.467 182.468 cv
493.963 181.842 492.814 181.616 491.903 181.962 cv
490.991 182.308 490.66 183.095 491.165 183.721 cv
491.669 184.346 492.817 184.573 493.729 184.227 cv
500.467 180.813 mo
501.119 180.256 500.989 179.441 500.176 178.994 cv
499.363 178.546 498.175 178.636 497.523 179.193 cv
496.871 179.751 497.001 180.565 497.814 181.012 cv
498.627 181.46 499.815 181.37 500.467 180.813 cv
500.507 174.26 mo
499.861 173.7 498.675 173.603 497.856 174.046 cv
497.038 174.489 496.899 175.303 497.545 175.864 cv
498.191 176.425 499.377 176.521 500.195 176.078 cv
501.014 175.635 501.153 174.821 500.507 174.26 cv
493.778 170.825 mo
492.867 170.479 491.718 170.704 491.213 171.329 cv
490.707 171.955 491.037 172.742 491.948 173.088 cv
492.86 173.435 494.008 173.209 494.513 172.584 cv
495.019 171.959 494.69 171.172 493.778 170.825 cv
487.03 168.306 mo
486.119 167.959 484.971 168.184 484.464 168.809 cv
483.959 169.433 484.287 170.221 485.199 170.568 cv
486.11 170.915 487.258 170.69 487.764 170.065 cv
488.27 169.44 487.942 168.652 487.03 168.306 cv
480.627 165.629 mo
479.768 165.224 478.593 165.372 478.003 165.961 cv
477.412 166.55 477.629 167.356 478.488 167.761 cv
479.346 168.166 480.521 168.017 481.112 167.428 cv
481.703 166.839 481.486 166.033 480.627 165.629 cv
474.861 162.457 mo
474.101 161.968 472.907 161.994 472.194 162.516 cv
471.481 163.037 471.52 163.856 472.28 164.345 cv
473.04 164.834 474.234 164.808 474.947 164.286 cv
475.66 163.765 475.622 162.946 474.861 162.457 cv
469.891 158.715 mo
469.252 158.151 468.067 158.049 467.243 158.488 cv
466.421 158.926 466.272 159.739 466.911 160.304 cv
467.552 160.868 468.737 160.969 469.559 160.531 cv
470.383 160.093 470.531 159.28 469.891 158.715 cv
465.803 154.489 mo
465.292 153.866 464.141 153.646 463.233 153.997 cv
462.325 154.348 462.004 155.137 462.515 155.759 cv
463.027 156.382 464.177 156.602 465.085 156.251 cv
465.994 155.901 466.315 155.111 465.803 154.488 cv
465.803 154.489 li
462.595 149.893 mo
462.205 149.23 461.105 148.909 460.138 149.176 cv
459.172 149.444 458.705 150.198 459.094 150.861 cv
459.484 151.523 460.583 151.844 461.55 151.577 cv
462.516 151.31 462.984 150.556 462.595 149.893 cv
460.195 145.039 mo
459.914 144.351 458.872 143.949 457.869 144.143 cv
456.865 144.337 456.28 145.051 456.562 145.739 cv
456.844 146.427 457.885 146.828 458.889 146.634 cv
459.892 146.442 460.477 145.727 460.195 145.039 cv
458.504 140.02 mo
458.313 139.318 457.329 138.854 456.304 138.984 cv
455.279 139.115 454.602 139.79 454.793 140.493 cv
454.983 141.195 455.969 141.659 456.993 141.528 cv
458.018 141.398 458.694 140.723 458.504 140.02 cv
f
455.528 135.01 mo
455.528 135.01 li
@
447.956 136.043 mo
446.991 136.314 446.53 137.069 446.923 137.731 cv
447.318 138.392 448.419 138.709 449.384 138.438 cv
450.349 138.168 450.811 137.412 450.417 136.751 cv
450.023 136.09 448.921 135.772 447.956 136.043 cv
440.984 137.694 mo
439.981 137.889 439.399 138.605 439.684 139.292 cv
439.968 139.98 441.012 140.379 442.014 140.183 cv
443.017 139.988 443.599 139.273 443.314 138.585 cv
443.03 137.898 441.986 137.499 440.984 137.694 cv
433.78 138.815 mo
432.754 138.937 432.064 139.606 432.242 140.31 cv
432.419 141.014 433.396 141.487 434.423 141.365 cv
435.449 141.244 436.138 140.575 435.961 139.87 cv
435.783 139.165 434.807 138.694 433.78 138.815 cv
426.43 139.432 mo
425.391 139.485 424.612 140.106 424.689 140.818 cv
424.767 141.531 425.672 142.066 426.712 142.013 cv
427.751 141.959 428.53 141.339 428.453 140.626 cv
428.375 139.913 427.47 139.379 426.43 139.432 cv
419.009 139.59 mo
417.967 139.582 417.113 140.155 417.103 140.869 cv
417.091 141.584 417.927 142.169 418.969 142.178 cv
420.011 142.185 420.865 141.612 420.876 140.897 cv
420.887 140.183 420.052 139.597 419.009 139.59 cv
411.571 139.343 mo
410.533 139.283 409.62 139.811 409.532 140.523 cv
409.445 141.235 410.216 141.861 411.253 141.922 cv
412.292 141.982 413.205 141.453 413.292 140.741 cv
413.381 140.029 412.609 139.402 411.571 139.343 cv
404.153 138.748 mo
403.122 138.644 402.163 139.132 402.01 139.839 cv
401.858 140.546 402.571 141.204 403.601 141.308 cv
404.632 141.413 405.591 140.925 405.744 140.218 cv
405.896 139.51 405.184 138.852 404.153 138.748 cv
396.776 137.861 mo
395.754 137.721 394.76 138.174 394.554 138.875 cv
394.347 139.575 395.009 140.257 396.03 140.399 cv
397.052 140.54 398.048 140.086 398.253 139.386 cv
398.459 138.685 397.798 138.003 396.776 137.861 cv
389.451 136.732 mo
388.439 136.561 387.417 136.985 387.167 137.679 cv
386.918 138.372 387.535 139.074 388.547 139.245 cv
389.559 139.417 390.581 138.992 390.832 138.299 cv
391.081 137.605 390.464 136.904 389.451 136.732 cv
382.18 135.406 mo
381.177 135.211 380.134 135.61 379.849 136.298 cv
379.564 136.985 380.146 137.701 381.149 137.896 cv
382.151 138.091 383.195 137.692 383.479 137.004 cv
383.764 136.317 383.182 135.601 382.18 135.406 cv
374.955 133.924 mo
373.96 133.71 372.902 134.089 372.59 134.771 cv
372.279 135.453 372.831 136.18 373.826 136.393 cv
374.82 136.607 375.88 136.228 376.191 135.546 cv
376.503 134.864 375.949 134.138 374.955 133.924 cv
367.77 132.322 mo
366.781 132.095 365.712 132.46 365.38 133.137 cv
365.049 133.815 365.581 134.548 366.569 134.775 cv
367.557 135.003 368.627 134.638 368.958 133.96 cv
369.289 133.283 368.757 132.549 367.77 132.322 cv
360.608 130.637 mo
359.624 130.401 358.548 130.757 358.204 131.431 cv
357.86 132.106 358.378 132.844 359.363 133.08 cv
359.363 133.079 li
360.347 133.316 361.423 132.96 361.766 132.285 cv
362.111 131.611 361.591 130.873 360.608 130.637 cv
353.46 128.905 mo
352.478 128.666 351.399 129.017 351.049 129.69 cv
350.701 130.364 351.213 131.104 352.195 131.343 cv
353.178 131.583 354.257 131.231 354.605 130.558 cv
354.955 129.884 354.441 129.144 353.46 128.905 cv
346.318 127.152 mo
345.338 126.911 344.257 127.26 343.904 127.933 cv
343.552 128.605 344.061 129.346 345.043 129.587 cv
346.024 129.829 347.104 129.48 347.456 128.807 cv
347.809 128.135 347.299 127.393 346.318 127.152 cv
339.163 125.401 mo
338.181 125.162 337.103 125.516 336.755 126.19 cv
336.408 126.864 336.924 127.603 337.906 127.84 cv
338.888 128.079 339.966 127.725 340.314 127.051 cv
340.66 126.377 340.146 125.638 339.163 125.401 cv
331.968 123.691 mo
330.981 123.462 329.91 123.824 329.576 124.502 cv
329.243 125.178 329.772 125.913 330.758 126.142 cv
331.746 126.371 332.817 126.008 333.151 125.331 cv
333.485 124.654 332.956 123.92 331.968 123.691 cv
324.716 122.063 mo
323.721 121.849 322.662 122.227 322.35 122.909 cv
322.037 123.59 322.588 124.317 323.583 124.531 cv
324.576 124.746 325.636 124.367 325.949 123.686 cv
326.262 123.004 325.709 122.277 324.716 122.063 cv
317.388 120.559 mo
316.386 120.365 315.343 120.765 315.059 121.453 cv
314.776 122.14 315.36 122.855 316.362 123.05 cv
317.365 123.244 318.408 122.844 318.691 122.156 cv
318.975 121.468 318.391 120.753 317.388 120.559 cv
309.971 119.225 mo
308.958 119.058 307.939 119.486 307.695 120.18 cv
307.452 120.875 308.075 121.574 309.088 121.741 cv
310.101 121.908 311.121 121.48 311.364 120.786 cv
311.608 120.091 310.984 119.392 309.971 119.225 cv
302.455 118.115 mo
301.431 117.983 300.444 118.445 300.252 119.148 cv
300.058 119.85 300.732 120.526 301.757 120.658 cv
302.781 120.79 303.767 120.328 303.96 119.626 cv
304.153 118.924 303.479 118.247 302.455 118.115 cv
294.84 117.294 mo
293.806 117.207 292.864 117.71 292.735 118.419 cv
292.608 119.129 293.342 119.775 294.376 119.863 cv
295.411 119.951 296.353 119.447 296.481 118.738 cv
296.609 118.029 295.875 117.382 294.84 117.294 cv
287.134 116.84 mo
286.093 116.807 285.21 117.36 285.163 118.074 cv
285.116 118.788 285.922 119.393 286.963 119.426 cv
288.003 119.458 288.886 118.906 288.934 118.192 cv
288.981 117.478 288.175 116.873 287.134 116.84 cv
279.377 116.84 mo
278.335 116.872 277.53 117.477 277.577 118.191 cv
277.624 118.905 278.506 119.458 279.547 119.425 cv
280.588 119.393 281.394 118.788 281.347 118.074 cv
281.3 117.36 280.417 116.807 279.377 116.84 cv
271.67 117.293 mo
270.635 117.381 269.901 118.027 270.029 118.737 cv
270.157 119.446 271.099 119.949 272.133 119.862 cv
273.168 119.774 273.902 119.128 273.775 118.418 cv
273.646 117.71 272.704 117.206 271.67 117.293 cv
264.055 118.113 mo
263.031 118.245 262.357 118.922 262.55 119.624 cv
262.743 120.327 263.729 120.789 264.753 120.657 cv
265.777 120.524 266.452 119.848 266.259 119.146 cv
266.066 118.443 265.079 117.982 264.055 118.113 cv
256.547 119.222 mo
255.534 119.389 254.909 120.087 255.153 120.782 cv
255.396 121.477 256.415 121.905 257.43 121.737 cv
258.443 121.571 259.066 120.872 258.823 120.177 cv
258.579 119.482 257.56 119.055 256.547 119.222 cv
249.135 120.554 mo
248.132 120.748 247.548 121.463 247.832 122.151 cv
248.115 122.839 249.157 123.239 250.161 123.045 cv
251.163 122.85 251.746 122.135 251.463 121.448 cv
251.181 120.76 250.138 120.36 249.135 120.554 cv
241.809 122.057 mo
240.814 122.271 240.263 122.998 240.576 123.68 cv
240.888 124.362 241.947 124.74 242.942 124.526 cv
243.935 124.311 244.488 123.585 244.175 122.903 cv
243.863 122.222 242.803 121.843 241.809 122.057 cv
234.554 123.685 mo
233.567 123.914 233.037 124.649 233.372 125.325 cv
233.706 126.002 234.777 126.365 235.763 126.136 cv
236.751 125.908 237.28 125.173 236.946 124.496 cv
236.613 123.819 235.541 123.456 234.554 123.685 cv
227.354 125.396 mo
226.371 125.634 225.855 126.373 226.203 127.047 cv
226.55 127.72 227.628 128.074 228.61 127.836 cv
229.593 127.598 230.108 126.859 229.761 126.185 cv
229.414 125.511 228.336 125.158 227.354 125.396 cv
220.195 127.148 mo
219.214 127.39 218.704 128.131 219.056 128.803 cv
219.408 129.476 220.489 129.825 221.47 129.584 cv
222.451 129.342 222.96 128.601 222.608 127.928 cv
222.256 127.256 221.175 126.907 220.195 127.148 cv
213.053 128.901 mo
212.071 129.14 211.558 129.88 211.907 130.553 cv
212.255 131.227 213.334 131.579 214.317 131.339 cv
215.299 131.1 215.812 130.36 215.463 129.686 cv
215.114 129.013 214.035 128.661 213.053 128.901 cv
205.907 130.631 mo
204.924 130.867 204.405 131.605 204.75 132.28 cv
205.093 132.954 206.169 133.31 207.153 133.074 cv
208.137 132.838 208.655 132.101 208.312 131.426 cv
207.968 130.751 206.891 130.395 205.907 130.631 cv
198.752 132.315 mo
197.765 132.543 197.233 133.277 197.564 133.954 cv
197.896 134.631 198.965 134.996 199.954 134.769 cv
200.942 134.542 201.474 133.808 201.142 133.131 cv
200.81 132.453 199.741 132.088 198.752 132.315 cv
191.571 133.918 mo
190.576 134.132 190.024 134.858 190.336 135.54 cv
190.648 136.222 191.706 136.601 192.701 136.387 cv
193.695 136.173 194.248 135.447 193.936 134.765 cv
193.625 134.083 192.565 133.704 191.571 133.918 cv
184.349 135.402 mo
183.347 135.597 182.764 136.313 183.05 137 cv
183.335 137.688 184.378 138.087 185.381 137.892 cv
186.383 137.696 186.964 136.98 186.68 136.293 cv
186.395 135.606 185.351 135.207 184.349 135.402 cv
177.076 136.73 mo
176.065 136.901 175.447 137.603 175.697 138.297 cv
175.947 138.991 176.97 139.414 177.981 139.243 cv
178.994 139.071 179.611 138.37 179.361 137.676 cv
179.111 136.982 178.088 136.559 177.076 136.73 cv
169.749 137.86 mo
168.728 138.001 168.067 138.684 168.273 139.384 cv
168.479 140.085 169.474 140.538 170.495 140.397 cv
171.517 140.256 172.178 139.574 171.972 138.873 cv
171.767 138.173 170.771 137.719 169.749 137.86 cv
162.37 138.747 mo
161.339 138.85 160.626 139.508 160.778 140.215 cv
160.93 140.922 161.888 141.411 162.919 141.307 cv
163.951 141.203 164.664 140.545 164.512 139.838 cv
164.36 139.131 163.4 138.642 162.37 138.747 cv
154.948 139.338 mo
153.909 139.398 153.137 140.023 153.225 140.736 cv
153.311 141.448 154.224 141.977 155.263 141.917 cv
156.3 141.858 157.072 141.232 156.986 140.52 cv
156.898 139.808 155.986 139.279 154.948 139.338 cv
147.507 139.58 mo
146.464 139.587 145.628 140.172 145.638 140.886 cv
145.647 141.601 146.501 142.175 147.542 142.168 cv
148.585 142.161 149.421 141.576 149.411 140.862 cv
149.402 140.147 148.548 139.574 147.507 139.58 cv
140.084 139.417 mo
139.044 139.363 138.138 139.897 138.059 140.61 cv
137.98 141.322 138.759 141.943 139.798 141.997 cv
140.838 142.052 141.744 141.518 141.823 140.805 cv
141.901 140.093 141.123 139.47 140.084 139.417 cv
132.733 138.795 mo
131.707 138.673 130.73 139.145 130.552 139.85 cv
130.374 140.554 131.063 141.223 132.089 141.345 cv
133.116 141.467 134.093 140.995 134.271 140.291 cv
134.449 139.587 133.76 138.917 132.733 138.795 cv
125.529 137.674 mo
124.526 137.479 123.483 137.879 123.199 138.566 cv
122.915 139.254 123.498 139.969 124.5 140.164 cv
125.503 140.359 126.546 139.959 126.83 139.272 cv
127.114 138.584 126.532 137.869 125.529 137.674 cv
118.552 136.032 mo
117.587 135.763 116.485 136.081 116.094 136.744 cv
115.702 137.406 116.166 138.16 117.131 138.43 cv
117.132 138.43 li
118.098 138.698 119.198 138.38 119.591 137.717 cv
119.982 137.056 119.518 136.301 118.552 136.032 cv
f
462.032 202.455 mo
464.859 202.455 li
464.859 201.001 li
462.032 201.001 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 1224 ]ct
[2.82744 0 0 1.45418 462.032 1021.54 ]ct
snap_to_device
<<
/T 1
/W 12 
/H 9 
/M[12 0 0 -9 0 9 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
461.796 201.324 mo
464.859 201.324 li
464.859 198.416 li
461.796 198.416 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 1224 ]ct
[3.06306 0 0 2.90837 461.796 1022.68 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 18 
/M[13 0 0 -18 0 18 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
<~=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1
=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1
=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1
=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]k~>
<~g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3
g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3
g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3
g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"?~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
